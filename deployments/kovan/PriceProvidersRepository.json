{
  "address": "0xEAA245128085913C220f5DC1D4494dF627F2568f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_siloRepository",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "newPriceProvider",
          "type": "address"
        }
      ],
      "name": "NewPriceProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderForAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "addPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "changeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "isPriceProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceProviders",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvidersRepositoryPing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providerList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "providersReadyForAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "removePriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "setPriceProviderForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloRepository",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x780cafed12cfe29c35b49942e9fe422c6202ebcfa2daddaaeaaf9ec6ecfdc794",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xEAA245128085913C220f5DC1D4494dF627F2568f",
    "transactionIndex": 1,
    "gasUsed": "1172752",
    "logsBloom": "0x
    "blockHash": "0xc41a4c2d79351ddec5182c4f89a46d94a765490e61938a76923202ab71c75ce4",
    "transactionHash": "0x780cafed12cfe29c35b49942e9fe422c6202ebcfa2daddaaeaaf9ec6ecfdc794",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30708574,
        "transactionHash": "0x780cafed12cfe29c35b49942e9fe422c6202ebcfa2daddaaeaaf9ec6ecfdc794",
        "address": "0xEAA245128085913C220f5DC1D4494dF627F2568f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xc41a4c2d79351ddec5182c4f89a46d94a765490e61938a76923202ab71c75ce4"
      }
    ],
    "blockNumber": 30708574,
    "cumulativeGasUsed": "1519445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0xD50B297f657aE1da36E342df8a8E122C915d6b97"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e6ec95f1876ffdb5c89e088426a74e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloRepository\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"NewPriceProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"addPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isPriceProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceProviders\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvidersRepositoryPing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"providersReadyForAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"removePriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setPriceProviderForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloRepository\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"addPriceProvider(address)\":{\"params\":{\"_priceProvider\":\"address of price provider\"}},\"changeManager(address)\":{\"details\":\"Callable by manager or external owner role\",\"params\":{\"_manager\":\"new manager address\"}},\"constructor\":{\"params\":{\"_quoteToken\":\"address of quote token\",\"_siloRepository\":\"address of SiloRepository\"}},\"getPrice(address)\":{\"params\":{\"_asset\":\"address of an asset for which to read price\"},\"returns\":{\"_0\":\"TWAP price of a token with 18 decimals\"}},\"isPriceProvider(address)\":{\"params\":{\"_provider\":\"address of price provider to be removed\"},\"returns\":{\"_0\":\"true if address is a registered price provider, otherwise false\"}},\"manager()\":{\"returns\":{\"_0\":\"manager role address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"priceProvidersRepositoryPing()\":{\"returns\":{\"_0\":\"returns always TRUE\"}},\"providerList()\":{\"returns\":{\"_0\":\"array of price providers\"}},\"providersCount()\":{\"returns\":{\"_0\":\"number of pice providers registerd\"}},\"providersReadyForAsset(address)\":{\"params\":{\"_asset\":\"asset address to check\"},\"returns\":{\"_0\":\"returns TRUE if price feed is ready, otherwise false\"}},\"removePriceProvider(address)\":{\"params\":{\"_priceProvider\":\"address of price provider to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPriceProviderForAsset(address,address)\":{\"details\":\"Request for asset price is forwarded to the price provider assigned to that asset\",\"params\":{\"_asset\":\"address of an asset for which price provider will be used\",\"_priceProvider\":\"address of price provider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_ONE\":{\"details\":\"Constant used for prices' decimal points, 1e18 is treated as 1\"},\"priceProviders\":{\"details\":\"Each asset must have a price provider contract assigned, otherwise it's not supported\"}},\"title\":\"PriceProvidersRepository\",\"version\":1},\"userdoc\":{\"events\":{\"ManagerChanged(address)\":{\"notice\":\"Emitted when manager is changed\"},\"NewPriceProvider(address)\":{\"notice\":\"Emitted when price provider is added\"},\"OwnershipPending(address,address)\":{\"notice\":\"Emitted when ownership transfer is proposed, aka pending owner is set\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\"},\"PriceProviderForAsset(address,address)\":{\"notice\":\"Emitted when asset is assigned to price provider\"},\"PriceProviderRemoved(address)\":{\"notice\":\"Emitted when price provider is removed\"}},\"kind\":\"user\",\"methods\":{\"addPriceProvider(address)\":{\"notice\":\"Register new price provider\"},\"changeManager(address)\":{\"notice\":\"Change manager address\"},\"getPrice(address)\":{\"notice\":\"Returns \\\"Time-Weighted Average Price\\\" for an asset\"},\"isPriceProvider(address)\":{\"notice\":\"Returns true if address is a registered price provider\"},\"manager()\":{\"notice\":\"Gets manager role address\"},\"priceProviders(address)\":{\"notice\":\"Maps asset address to its price provider\"},\"priceProvidersRepositoryPing()\":{\"notice\":\"Sanity check funciton\"},\"providerList()\":{\"notice\":\"Gets an array of price providers\"},\"providersCount()\":{\"notice\":\"Gets number of pice providers registerd\"},\"providersReadyForAsset(address)\":{\"notice\":\"Check if prices are available for an asset\"},\"quoteToken()\":{\"notice\":\"Token in which prices are quoted. It's most likely WETH, however it could vary from deployment to deployment. For example 1 SILO costs X amount of quoteToken.\"},\"removePriceProvider(address)\":{\"notice\":\"Unregister price provider\"},\"setPriceProviderForAsset(address,address)\":{\"notice\":\"Sets price provider for asset\"},\"siloRepository()\":{\"notice\":\"SiloRepository contract address\"}},\"notice\":\"A repository of price providers. It manages price providers as well as maps assets to their price provider. It acts as a entry point for Silo for token prices.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceProvidersRepository.sol\":\"PriceProvidersRepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/PriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\nimport \\\"./utils/Managable.sol\\\";\\nimport \\\"./utils/TwoStepOwnable.sol\\\";\\n\\nimport \\\"./lib/Ping.sol\\\";\\n\\n/// @title PriceProvidersRepository\\n/// @notice A repository of price providers. It manages price providers as well as maps assets to their price\\n/// provider. It acts as a entry point for Silo for token prices.\\n/// @custom:security-contact security@silo.finance\\ncontract PriceProvidersRepository is IPriceProvidersRepository, Managable, TwoStepOwnable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Constant used for prices' decimal points, 1e18 is treated as 1\\n    uint256 private constant _ONE = 10**18;\\n\\n    /// @notice SiloRepository contract address\\n    address public immutable siloRepository;\\n    /// @notice Token in which prices are quoted. It's most likely WETH, however it could vary from deployment\\n    /// to deployment. For example 1 SILO costs X amount of quoteToken.\\n    address public immutable override quoteToken;\\n\\n    /// @notice Maps asset address to its price provider\\n    /// @dev Each asset must have a price provider contract assigned, otherwise it's not supported\\n    mapping(address => IPriceProvider) public override priceProviders;\\n\\n    /// @notice Array of all price providers\\n    EnumerableSet.AddressSet private _allProviders;\\n\\n    modifier onlyRepository() {\\n        require(msg.sender == address(siloRepository), \\\"ProvidersRepository: onlyRepository\\\");\\n        _;\\n    }\\n\\n    /// @param _quoteToken address of quote token\\n    /// @param _siloRepository address of SiloRepository\\n    constructor(address _quoteToken, address _siloRepository) Managable(msg.sender) {\\n        require(Ping.decimals(_quoteToken) == 18, \\\"quoteToken not supported\\\");\\n        require(Ping.pong(_siloRepository, ISiloRepository.siloRepositoryPing.selector), \\\"invalid _siloRepository\\\");\\n\\n        siloRepository = _siloRepository;\\n        quoteToken = _quoteToken;\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function addPriceProvider(IPriceProvider _provider) external override onlyOwner {\\n        require(\\n            Ping.pong(address(_provider), IPriceProvider.priceProviderPing.selector),\\n            \\\"ProvidersRepository: not an provider\\\"\\n        );\\n\\n        require(_provider.quoteToken() == quoteToken, \\\"ProvidersRepository: invalid provider.quoteToken\\\");\\n        require(_allProviders.add(address(_provider)), \\\"ProvidersRepository: provider already exists\\\");\\n\\n        emit NewPriceProvider(_provider);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function removePriceProvider(IPriceProvider _provider) external virtual override onlyOwner {\\n        require(_allProviders.remove(address(_provider)), \\\"ProvidersRepository: provider does not exist\\\");\\n\\n        emit PriceProviderRemoved(_provider);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _provider) external virtual override onlyManager {\\n        require(_allProviders.contains(address(_provider)), \\\"ProvidersRepository: provider not registered\\\");\\n        require(_provider.assetSupported(_asset), \\\"ProvidersRepository: asset not supported\\\");\\n\\n        emit PriceProviderForAsset(_asset, _provider);\\n        priceProviders[_asset] = _provider;\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function isPriceProvider(IPriceProvider _provider) external view override returns (bool) {\\n        return _allProviders.contains(address(_provider));\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function providersCount() external view override returns (uint256) {\\n        return _allProviders.length();\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function providerList() external view override returns (address[] memory) {\\n        return _allProviders.values();\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function providersReadyForAsset(address _asset) external view override returns (bool) {\\n        IPriceProvider priceProvider = priceProviders[_asset];\\n        if (address(priceProvider) == address(0)) return false;\\n\\n        return priceProvider.assetSupported(_asset);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function priceProvidersRepositoryPing() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function manager() public view override(Managable, IPriceProvidersRepository) returns (address) {\\n        return Managable.manager();\\n    }\\n\\n    /// @inheritdoc TwoStepOwnable\\n    function owner() public view override(Managable, TwoStepOwnable) returns (address) {\\n        return TwoStepOwnable.owner();\\n    }\\n\\n    /// @inheritdoc IPriceProvidersRepository\\n    function getPrice(address _asset) public view override virtual returns (uint256) {\\n        if (_asset == quoteToken) return _ONE;\\n\\n        return priceProviders[_asset].getPrice(_asset);\\n    }\\n}\\n\",\"keccak256\":\"0x36a19947eddb07bbdecc2d247dc1aa0f05aab46684cd020dc1dbfee208896d75\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for giver asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for giver asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config sturct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x19e6633d7dea9df2f41b8617d1adc0663aee37c66ba5eaabc4adcd8eb3ec54dc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb48b97fe9aeca820bd8e067fb9682b577933e6653f5bf0617ab68f4f54a23ead\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffor for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xe7465c2a0138997490bb500af8359950251b2aa7bcbdf05c232ab38ea5a156d5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Check if prices are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of pice providers registerd\\n    /// @return number of pice providers registerd\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check funciton\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x060ebf77b1036628cb17549f9831aaab80aa164169a49e561428826c1340714e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt positon\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt positon\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /// @notice Returns token symbol\\n    /// @return token symbol\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2c231826b52ad5824db47830d686afa8e41dfc08b5f78f1a533ad2025fef5cb7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of assset for which Silo was deployed\\n    event NewSiloCreated(address indexed silo, address indexed asset);\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x8c339cc5ed5e5c5050a43478a2e55df6268a46efea6eff8b8e415b8108687d96\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (BaseSilo.PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (BaseSilo.PRECISION_DECIMALS()).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param oldProvider address of old oracle repository\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository oldProvider,\\n        IPriceProvidersRepository newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param oldTokensFactory address of old token factory\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param oldRouter address of old router\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registerd Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregisterd Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param oldDefaultVersion old default version\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 oldDefaultVersion, uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function newSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS()). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for detailes see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(address _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Set default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possbile that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possbile that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb9a54186c0e9c0c304fa3cb1e12b4b7563d7c2de3a197098a00e2dcf10de6147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xc9897a2129b8d90ab9e89520fb5b5c2941b38c9631f556feaf2bd3dd006ac632\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nlibrary Ping {\\n    function pong(address _contract, bytes4 _selector) internal view returns (bool) {\\n        if (_contract == address(0)) return false;\\n\\n        (bool success, bytes memory data) = _contract.staticcall(abi.encodeWithSelector(_selector));\\n        return success && abi.decode(data, (bool));\\n    }\\n\\n    function decimals(address _contract) internal view returns (uint256) {\\n        if (_contract == address(0)) return 0;\\n\\n        (bool success, bytes memory data) = _contract.staticcall(abi.encodeWithSelector(ERC20.decimals.selector));\\n        if (!success) return 0;\\n\\n        return abi.decode(data, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x08ec301de876bf746df001a7ed87f50d97edcfb0e12483ec98f72f96138b054d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Managable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Managable\\n/// @notice Implements simple manager role that can be changed by a manger or external owner role\\n/// @dev This contract is designed to work with Ownable from openzeppelin\\n/// @custom:security-contact security@silo.finance\\nabstract contract Managable {\\n    /// @notice wallet address of manager role\\n    address private _managerRole;\\n\\n    /// @notice Emitted when manager is changed\\n    /// @param manager new manager address\\n    event ManagerChanged(address manager);\\n\\n    modifier onlyManager() {\\n        require(_managerRole == msg.sender, \\\"Managable: not a manager\\\");\\n        _;\\n    }\\n\\n    /// @param _manager new manager address\\n    constructor(address _manager) {\\n        require(_manager != address(0), \\\"Managable: empty manager\\\");\\n\\n        _managerRole = _manager;\\n    }\\n\\n    /// @notice Change manager address\\n    /// @dev Callable by manager or external owner role\\n    /// @param _manager new manager address\\n    function changeManager(address _manager) external {\\n        require(msg.sender == owner() || msg.sender == _managerRole, \\\"access denied\\\");\\n        require(_manager != address(0), \\\"Managable: empty manager\\\");\\n\\n        _managerRole = _manager;\\n        emit ManagerChanged(_manager);\\n    }\\n\\n    function manager() public view virtual returns (address) {\\n        return _managerRole;\\n    }\\n\\n    /// @notice Gets external owner role\\n    /// @return owner address\\n    function owner() public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4a8fb6e34b77993d9210b4476354fa80578496e77bcf0fce3dd1e74acab8959a\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @title TwoStepOwnable\\n/// @notice Contract that implements the same functionality as popular Ownable contract from openzeppelin library.\\n/// The only difference is that it adds a possibility to transfer ownership in two steps. Single step ownership\\n/// transfer is still supported.\\n/// @dev Two step ownership transfer is meant to be used by humans to avoid human error. Single step ownership\\n/// transfer is meant to be used by smart contracts to avoid over-complicated two step integartion. For that reason,\\n/// both ways are supported.\\n/// @custom:security-contact security@silo.finance\\nabstract contract TwoStepOwnable {\\n    /// @notice current owner\\n    address private _owner;\\n    /// @notice candidate to an owner\\n    address private _pendingOwner;\\n\\n    /// @notice Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\\n    /// @param previousOwner previous owner\\n    /// @param newOwner new owner\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    /// @notice Emitted when ownership transfer is proposed, aka pending owner is set\\n    /// @param previousOwner current owner\\n    /// @param newOwner new proposed/pending owner\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xab6fa28a2db4651ad9a1f1931ca396e4b8addb2e0eac424b04d2b5ad90441b54\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620017a1380380620017a18339810160408190526200003491620003bb565b3380620000885760405162461bcd60e51b815260206004820152601860248201527f4d616e616761626c653a20656d707479206d616e61676572000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055620000b333620001a6565b620000c982620001f860201b62000d041760201c565b6012146200011a5760405162461bcd60e51b815260206004820152601860248201527f71756f7465546f6b656e206e6f7420737570706f72746564000000000000000060448201526064016200007f565b620001388163e99ed41d60e01b620002cb60201b62000dcf1760201c565b620001865760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964205f73696c6f5265706f7369746f727900000000000000000060448201526064016200007f565b6001600160601b0319606091821b811660805291901b1660a05262000476565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0382166200021157506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691620002569162000438565b600060405180830381855afa9150503d806000811462000293576040519150601f19603f3d011682016040523d82523d6000602084013e62000298565b606091505b509150915081620002ad575060009392505050565b80806020019051810190620002c391906200041e565b949350505050565b60006001600160a01b038316620002e55750600062000398565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b038716916200032d9162000438565b600060405180830381855afa9150503d80600081146200036a576040519150601f19603f3d011682016040523d82523d6000602084013e6200036f565b606091505b509150915081801562000393575080806020019051810190620003939190620003f3565b925050505b92915050565b80516001600160a01b0381168114620003b657600080fd5b919050565b60008060408385031215620003cf57600080fd5b620003da836200039e565b9150620003ea602084016200039e565b90509250929050565b6000602082840312156200040657600080fd5b815180151581146200041757600080fd5b9392505050565b6000602082840312156200043157600080fd5b5051919050565b6000825160005b818110156200045b57602081860181015185830152016200043f565b818111156200046b576000828501525b509190910192915050565b60805160601c60a05160601c6112f1620004b06000396000818161014b0152818161039101526106b50152600061028401526112f16000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c834439f11610071578063c834439f146102a6578063d0659d75146102bb578063e30c3978146102c3578063eec3e6a7146102d4578063f2fde38b146102db57600080fd5b80638da5cb5b1461023e57806393b6809c1461024657806397e8a2d814610259578063a3fbbaae1461026c578063bde127181461027f57600080fd5b8063481c6a75116100f4578063481c6a75146101d157806350ebbcc1146101e25780635d54e39514610205578063715018a61461022e57806379ba50971461023657600080fd5b80631b01d69e14610131578063217a4b70146101465780633278c6941461018a57806339b216a31461019d57806341976e09146101b0575b600080fd5b61014461013f3660046110ea565b6102ee565b005b61016d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101446101983660046110ea565b610545565b6101446101ab3660046110ea565b6105dd565b6101c36101be3660046110ea565b6106b1565b604051908152602001610181565b6000546001600160a01b031661016d565b6101f56101f03660046110ea565b610794565b6040519015158152602001610181565b61016d6102133660046110ea565b6003602052600090815260409020546001600160a01b031681565b61014461083f565b61014461087a565b61016d610910565b610144610254366004611124565b610924565b6101f56102673660046110ea565b610b2e565b61014461027a3660046110ea565b610b3b565b61016d7f000000000000000000000000000000000000000000000000000000000000000081565b6102ae610c4c565b60405161018191906111d3565b6101c3610c58565b6002546001600160a01b031661016d565b60016101f5565b6101446102e93660046110ea565b610c64565b336102f7610910565b6001600160a01b0316146103265760405162461bcd60e51b815260040161031d90611220565b60405180910390fd5b610337816357e0c50f60e01b610dcf565b61038f5760405162461bcd60e51b8152602060048201526024808201527f50726f7669646572735265706f7369746f72793a206e6f7420616e2070726f7660448201526334b232b960e11b606482015260840161031d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190611107565b6001600160a01b0316146104995760405162461bcd60e51b815260206004820152603060248201527f50726f7669646572735265706f7369746f72793a20696e76616c69642070726f60448201526f3b34b232b91738bab7ba32aa37b5b2b760811b606482015260840161031d565b6104a4600482610e97565b6105055760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f766964657220616c60448201526b72656164792065786973747360a01b606482015260840161031d565b6040516001600160a01b03821681527f4705d8451928f44517faa1bdfbbca0e2b931ae93313f022b3b989537b0daa6f5906020015b60405180910390a150565b3361054e610910565b6001600160a01b0316146105745760405162461bcd60e51b815260040161031d90611220565b806001600160a01b0316610586610910565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b336105e6610910565b6001600160a01b03161461060c5760405162461bcd60e51b815260040161031d90611220565b610617600482610eac565b6106785760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f766964657220646f60448201526b195cc81b9bdd08195e1a5cdd60a21b606482015260840161031d565b6040516001600160a01b03821681527fbecb08a245e5ee64b9cf97ff511fa99537ede3f8387ee3df7f951ef1dabd19bd9060200161053a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106fc5750670de0b6b3a7640000919050565b6001600160a01b03828116600081815260036020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610789919061117f565b92915050565b905090565b6001600160a01b03808216600090815260036020526040812054909116806107bf5750600092915050565b60405163598fd92b60e11b81526001600160a01b03848116600483015282169063b31fb2569060240160206040518083038186803b15801561080057600080fd5b505afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061115d565b9392505050565b33610848610910565b6001600160a01b03161461086e5760405162461bcd60e51b815260040161031d90611220565b6108786000610ec1565b565b6002546001600160a01b031633146108e45760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161031d565b6108fe6108f96002546001600160a01b031690565b610ec1565b600280546001600160a01b0319169055565b600061078f6001546001600160a01b031690565b6000546001600160a01b0316331461097e5760405162461bcd60e51b815260206004820152601860248201527f4d616e616761626c653a206e6f742061206d616e616765720000000000000000604482015260640161031d565b610989600482610f13565b6109ea5760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f7669646572206e6f60448201526b1d081c9959da5cdd195c995960a21b606482015260840161031d565b60405163598fd92b60e11b81526001600160a01b03838116600483015282169063b31fb2569060240160206040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a63919061115d565b610ac05760405162461bcd60e51b815260206004820152602860248201527f50726f7669646572735265706f7369746f72793a206173736574206e6f7420736044820152671d5c1c1bdc9d195960c21b606482015260840161031d565b6040516001600160a01b0382811682528316907f26eb74ff7dd83e64daf822c2515feb1b0a46015000c9f339e23df098823761519060200160405180910390a26001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000610789600483610f13565b610b43610910565b6001600160a01b0316336001600160a01b03161480610b6c57506000546001600160a01b031633145b610ba85760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015260640161031d565b6001600160a01b038116610bfe5760405162461bcd60e51b815260206004820152601860248201527f4d616e616761626c653a20656d707479206d616e616765720000000000000000604482015260640161031d565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f198db6e425fb8aafd1823c6ca50be2d51e5764571a5ae0f0f21c6812e45def0b9060200161053a565b606061078f6004610f35565b600061078f6004610f42565b33610c6d610910565b6001600160a01b031614610c935760405162461bcd60e51b815260040161031d90611220565b6001600160a01b038116610cf85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031d565b610d0181610ec1565b50565b60006001600160a01b038216610d1c57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691610d5f91611198565b600060405180830381855afa9150503d8060008114610d9a576040519150601f19603f3d011682016040523d82523d6000602084013e610d9f565b606091505b509150915081610db3575060009392505050565b80806020019051810190610dc7919061117f565b949350505050565b60006001600160a01b038316610de757506000610789565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b03871691610e2d91611198565b600060405180830381855afa9150503d8060008114610e68576040519150601f19603f3d011682016040523d82523d6000602084013e610e6d565b606091505b5091509150818015610e8e575080806020019051810190610e8e919061115d565b95945050505050565b6000610838836001600160a01b038416610f4c565b6000610838836001600160a01b038416610f9b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526001830160205260408120541515610838565b606060006108388361108e565b6000610789825490565b6000818152600183016020526040812054610f9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610789565b506000610789565b60008181526001830160205260408120548015611084576000610fbf600183611255565b8554909150600090610fd390600190611255565b9050818114611038576000866000018281548110610ff357610ff3611290565b906000526020600020015490508087600001848154811061101657611016611290565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806110495761104961127a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610789565b6000915050610789565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110de57602002820191906000526020600020905b8154815260200190600101908083116110ca575b50505050509050919050565b6000602082840312156110fc57600080fd5b8135610838816112a6565b60006020828403121561111957600080fd5b8151610838816112a6565b6000806040838503121561113757600080fd5b8235611142816112a6565b91506020830135611152816112a6565b809150509250929050565b60006020828403121561116f57600080fd5b8151801515811461083857600080fd5b60006020828403121561119157600080fd5b5051919050565b6000825160005b818110156111b9576020818601810151858301520161119f565b818111156111c8576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156112145783516001600160a01b0316835292840192918401916001016111ef565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561127557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610d0157600080fdfea26469706673582212207af72cd1e7a9e48fd756f02c2deb9d79b59e0f14debdc2f3bbcfe49400ebf3fc64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c834439f11610071578063c834439f146102a6578063d0659d75146102bb578063e30c3978146102c3578063eec3e6a7146102d4578063f2fde38b146102db57600080fd5b80638da5cb5b1461023e57806393b6809c1461024657806397e8a2d814610259578063a3fbbaae1461026c578063bde127181461027f57600080fd5b8063481c6a75116100f4578063481c6a75146101d157806350ebbcc1146101e25780635d54e39514610205578063715018a61461022e57806379ba50971461023657600080fd5b80631b01d69e14610131578063217a4b70146101465780633278c6941461018a57806339b216a31461019d57806341976e09146101b0575b600080fd5b61014461013f3660046110ea565b6102ee565b005b61016d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101446101983660046110ea565b610545565b6101446101ab3660046110ea565b6105dd565b6101c36101be3660046110ea565b6106b1565b604051908152602001610181565b6000546001600160a01b031661016d565b6101f56101f03660046110ea565b610794565b6040519015158152602001610181565b61016d6102133660046110ea565b6003602052600090815260409020546001600160a01b031681565b61014461083f565b61014461087a565b61016d610910565b610144610254366004611124565b610924565b6101f56102673660046110ea565b610b2e565b61014461027a3660046110ea565b610b3b565b61016d7f000000000000000000000000000000000000000000000000000000000000000081565b6102ae610c4c565b60405161018191906111d3565b6101c3610c58565b6002546001600160a01b031661016d565b60016101f5565b6101446102e93660046110ea565b610c64565b336102f7610910565b6001600160a01b0316146103265760405162461bcd60e51b815260040161031d90611220565b60405180910390fd5b610337816357e0c50f60e01b610dcf565b61038f5760405162461bcd60e51b8152602060048201526024808201527f50726f7669646572735265706f7369746f72793a206e6f7420616e2070726f7660448201526334b232b960e11b606482015260840161031d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190611107565b6001600160a01b0316146104995760405162461bcd60e51b815260206004820152603060248201527f50726f7669646572735265706f7369746f72793a20696e76616c69642070726f60448201526f3b34b232b91738bab7ba32aa37b5b2b760811b606482015260840161031d565b6104a4600482610e97565b6105055760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f766964657220616c60448201526b72656164792065786973747360a01b606482015260840161031d565b6040516001600160a01b03821681527f4705d8451928f44517faa1bdfbbca0e2b931ae93313f022b3b989537b0daa6f5906020015b60405180910390a150565b3361054e610910565b6001600160a01b0316146105745760405162461bcd60e51b815260040161031d90611220565b806001600160a01b0316610586610910565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b336105e6610910565b6001600160a01b03161461060c5760405162461bcd60e51b815260040161031d90611220565b610617600482610eac565b6106785760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f766964657220646f60448201526b195cc81b9bdd08195e1a5cdd60a21b606482015260840161031d565b6040516001600160a01b03821681527fbecb08a245e5ee64b9cf97ff511fa99537ede3f8387ee3df7f951ef1dabd19bd9060200161053a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106fc5750670de0b6b3a7640000919050565b6001600160a01b03828116600081815260036020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610789919061117f565b92915050565b905090565b6001600160a01b03808216600090815260036020526040812054909116806107bf5750600092915050565b60405163598fd92b60e11b81526001600160a01b03848116600483015282169063b31fb2569060240160206040518083038186803b15801561080057600080fd5b505afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061115d565b9392505050565b33610848610910565b6001600160a01b03161461086e5760405162461bcd60e51b815260040161031d90611220565b6108786000610ec1565b565b6002546001600160a01b031633146108e45760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161031d565b6108fe6108f96002546001600160a01b031690565b610ec1565b600280546001600160a01b0319169055565b600061078f6001546001600160a01b031690565b6000546001600160a01b0316331461097e5760405162461bcd60e51b815260206004820152601860248201527f4d616e616761626c653a206e6f742061206d616e616765720000000000000000604482015260640161031d565b610989600482610f13565b6109ea5760405162461bcd60e51b815260206004820152602c60248201527f50726f7669646572735265706f7369746f72793a2070726f7669646572206e6f60448201526b1d081c9959da5cdd195c995960a21b606482015260840161031d565b60405163598fd92b60e11b81526001600160a01b03838116600483015282169063b31fb2569060240160206040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a63919061115d565b610ac05760405162461bcd60e51b815260206004820152602860248201527f50726f7669646572735265706f7369746f72793a206173736574206e6f7420736044820152671d5c1c1bdc9d195960c21b606482015260840161031d565b6040516001600160a01b0382811682528316907f26eb74ff7dd83e64daf822c2515feb1b0a46015000c9f339e23df098823761519060200160405180910390a26001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000610789600483610f13565b610b43610910565b6001600160a01b0316336001600160a01b03161480610b6c57506000546001600160a01b031633145b610ba85760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015260640161031d565b6001600160a01b038116610bfe5760405162461bcd60e51b815260206004820152601860248201527f4d616e616761626c653a20656d707479206d616e616765720000000000000000604482015260640161031d565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f198db6e425fb8aafd1823c6ca50be2d51e5764571a5ae0f0f21c6812e45def0b9060200161053a565b606061078f6004610f35565b600061078f6004610f42565b33610c6d610910565b6001600160a01b031614610c935760405162461bcd60e51b815260040161031d90611220565b6001600160a01b038116610cf85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031d565b610d0181610ec1565b50565b60006001600160a01b038216610d1c57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691610d5f91611198565b600060405180830381855afa9150503d8060008114610d9a576040519150601f19603f3d011682016040523d82523d6000602084013e610d9f565b606091505b509150915081610db3575060009392505050565b80806020019051810190610dc7919061117f565b949350505050565b60006001600160a01b038316610de757506000610789565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b03871691610e2d91611198565b600060405180830381855afa9150503d8060008114610e68576040519150601f19603f3d011682016040523d82523d6000602084013e610e6d565b606091505b5091509150818015610e8e575080806020019051810190610e8e919061115d565b95945050505050565b6000610838836001600160a01b038416610f4c565b6000610838836001600160a01b038416610f9b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526001830160205260408120541515610838565b606060006108388361108e565b6000610789825490565b6000818152600183016020526040812054610f9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610789565b506000610789565b60008181526001830160205260408120548015611084576000610fbf600183611255565b8554909150600090610fd390600190611255565b9050818114611038576000866000018281548110610ff357610ff3611290565b906000526020600020015490508087600001848154811061101657611016611290565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806110495761104961127a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610789565b6000915050610789565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110de57602002820191906000526020600020905b8154815260200190600101908083116110ca575b50505050509050919050565b6000602082840312156110fc57600080fd5b8135610838816112a6565b60006020828403121561111957600080fd5b8151610838816112a6565b6000806040838503121561113757600080fd5b8235611142816112a6565b91506020830135611152816112a6565b809150509250929050565b60006020828403121561116f57600080fd5b8151801515811461083857600080fd5b60006020828403121561119157600080fd5b5051919050565b6000825160005b818110156111b9576020818601810151858301520161119f565b818111156111c8576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156112145783516001600160a01b0316835292840192918401916001016111ef565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561127557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610d0157600080fdfea26469706673582212207af72cd1e7a9e48fd756f02c2deb9d79b59e0f14debdc2f3bbcfe49400ebf3fc64736f6c63430008070033",
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "addPriceProvider(address)": {
        "params": {
          "_priceProvider": "address of price provider"
        }
      },
      "changeManager(address)": {
        "details": "Callable by manager or external owner role",
        "params": {
          "_manager": "new manager address"
        }
      },
      "constructor": {
        "params": {
          "_quoteToken": "address of quote token",
          "_siloRepository": "address of SiloRepository"
        }
      },
      "getPrice(address)": {
        "params": {
          "_asset": "address of an asset for which to read price"
        },
        "returns": {
          "_0": "TWAP price of a token with 18 decimals"
        }
      },
      "isPriceProvider(address)": {
        "params": {
          "_provider": "address of price provider to be removed"
        },
        "returns": {
          "_0": "true if address is a registered price provider, otherwise false"
        }
      },
      "manager()": {
        "returns": {
          "_0": "manager role address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "priceProvidersRepositoryPing()": {
        "returns": {
          "_0": "returns always TRUE"
        }
      },
      "providerList()": {
        "returns": {
          "_0": "array of price providers"
        }
      },
      "providersCount()": {
        "returns": {
          "_0": "number of pice providers registerd"
        }
      },
      "providersReadyForAsset(address)": {
        "params": {
          "_asset": "asset address to check"
        },
        "returns": {
          "_0": "returns TRUE if price feed is ready, otherwise false"
        }
      },
      "removePriceProvider(address)": {
        "params": {
          "_priceProvider": "address of price provider to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPriceProviderForAsset(address,address)": {
        "details": "Request for asset price is forwarded to the price provider assigned to that asset",
        "params": {
          "_asset": "address of an asset for which price provider will be used",
          "_priceProvider": "address of price provider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_ONE": {
        "details": "Constant used for prices' decimal points, 1e18 is treated as 1"
      },
      "priceProviders": {
        "details": "Each asset must have a price provider contract assigned, otherwise it's not supported"
      }
    },
    "title": "PriceProvidersRepository",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ManagerChanged(address)": {
        "notice": "Emitted when manager is changed"
      },
      "NewPriceProvider(address)": {
        "notice": "Emitted when price provider is added"
      },
      "OwnershipPending(address,address)": {
        "notice": "Emitted when ownership transfer is proposed, aka pending owner is set"
      },
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`"
      },
      "PriceProviderForAsset(address,address)": {
        "notice": "Emitted when asset is assigned to price provider"
      },
      "PriceProviderRemoved(address)": {
        "notice": "Emitted when price provider is removed"
      }
    },
    "kind": "user",
    "methods": {
      "addPriceProvider(address)": {
        "notice": "Register new price provider"
      },
      "changeManager(address)": {
        "notice": "Change manager address"
      },
      "getPrice(address)": {
        "notice": "Returns \"Time-Weighted Average Price\" for an asset"
      },
      "isPriceProvider(address)": {
        "notice": "Returns true if address is a registered price provider"
      },
      "manager()": {
        "notice": "Gets manager role address"
      },
      "priceProviders(address)": {
        "notice": "Maps asset address to its price provider"
      },
      "priceProvidersRepositoryPing()": {
        "notice": "Sanity check funciton"
      },
      "providerList()": {
        "notice": "Gets an array of price providers"
      },
      "providersCount()": {
        "notice": "Gets number of pice providers registerd"
      },
      "providersReadyForAsset(address)": {
        "notice": "Check if prices are available for an asset"
      },
      "quoteToken()": {
        "notice": "Token in which prices are quoted. It's most likely WETH, however it could vary from deployment to deployment. For example 1 SILO costs X amount of quoteToken."
      },
      "removePriceProvider(address)": {
        "notice": "Unregister price provider"
      },
      "setPriceProviderForAsset(address,address)": {
        "notice": "Sets price provider for asset"
      },
      "siloRepository()": {
        "notice": "SiloRepository contract address"
      }
    },
    "notice": "A repository of price providers. It manages price providers as well as maps assets to their price provider. It acts as a entry point for Silo for token prices.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21648,
        "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
        "label": "_managerRole",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22162,
        "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 22165,
        "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11335,
        "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
        "label": "priceProviders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_contract(IPriceProvider)16286)"
      },
      {
        "astId": 11339,
        "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
        "label": "_allProviders",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)7290_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPriceProvider)16286": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IPriceProvider)16286)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)16286"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7290_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7289,
            "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6989_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6984,
            "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6988,
            "contract": "contracts/PriceProvidersRepository.sol:PriceProvidersRepository",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}