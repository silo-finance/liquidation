{
  "address": "0x4aFe35da94692D6be34ACD950360455f79066939",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "NewSiloCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "silo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloFactoryPing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b3bc3095649267686ce237b356c7c829d65d61594d3fc5f977f574966d38927",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0x4aFe35da94692D6be34ACD950360455f79066939",
    "transactionIndex": 0,
    "gasUsed": "5327116",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcfafa9dc5b376df312cb18e308c9130ac8b7e53186d3afa824306254ca65257d",
    "transactionHash": "0x5b3bc3095649267686ce237b356c7c829d65d61594d3fc5f977f574966d38927",
    "logs": [],
    "blockNumber": 30708557,
    "cumulativeGasUsed": "5327116",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4e6ec95f1876ffdb5c89e088426a74e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NewSiloCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloFactoryPing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"details\":\"Silo Factory is registered within SiloRepository contract and it's given a version. Each version is differet Silo Factory that deploys different Silo implementation. Many Factory contracts can be registered with the Repository contract.\",\"kind\":\"dev\",\"methods\":{\"createSilo(address,bytes)\":{\"params\":{\"_data\":\"(optional) data that may be needed during silo creation\",\"_siloAsset\":\"unique asset for which Silo is deployed\"},\"returns\":{\"silo\":\"deployed Silo address\"}},\"siloFactoryPing()\":{\"details\":\"just a helper method to see if address is a factory\"}},\"title\":\"SiloFactory\",\"version\":1},\"userdoc\":{\"events\":{\"NewSiloCreated(address,address)\":{\"notice\":\"Emitted when Silo is deployed\"}},\"kind\":\"user\",\"methods\":{\"createSilo(address,bytes)\":{\"notice\":\"Deploys Silo\"}},\"notice\":\"Silo Factory has one job, deploy Silo implementaiton\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloFactory.sol\":\"SiloFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IBaseSilo.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\nimport \\\"./interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\n\\nimport \\\"./lib/Ping.sol\\\";\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./lib/TokenSymbol.sol\\\";\\nimport \\\"./lib/Solvency.sol\\\";\\nimport \\\"./Error.sol\\\";\\n\\n/// @title IBaseSilo\\n/// @dev Base contract for Silo core logic.\\n/// @custom:security-contact security@silo.finance\\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable ASSET_DECIMAL_POINTS;\\n\\n    ISiloRepository immutable public override siloRepository;\\n\\n    // asset address for which Silo was created\\n    address public immutable siloAsset;\\n\\n    /// @dev stores all *synced* assets (bridge assets + removed bridge assets + siloAsset)\\n    address[] public allSiloAssets;\\n\\n    // TODO\\n    /// @dev version of silo\\n    /// @notice It tells us which `SiloRepository.siloFactory(version)` created this Silo\\n    uint256 public constant VERSION = 0;\\n\\n    /// @dev asset => AssetStorage\\n    mapping(address => AssetStorage) public state;\\n\\n    /// @dev asset => AssetInterestData\\n    mapping(address => AssetInterestData) public assetInterestData;\\n\\n    modifier onlyExistingAsset(address _asset) {\\n        require(assetInterestData[_asset].status != AssetStatus.Undefined, \\\"BaseSilo: asset does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == siloRepository.router(), \\\"BaseSilo: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier validateMaxDepositsAfter(address _asset) {\\n        _;\\n\\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\\n\\n        require(\\n            priceProviderRepo.getPrice(_asset) * state[_asset].totalDeposits / (10 ** ERC20(_asset).decimals()) <=\\n            IGuardedLaunch(address(siloRepository)).getMaxSiloDeposits(address(this), _asset),\\n            \\\"BaseSilo: total deposits exceed liquidity limit\\\"\\n        );\\n    }\\n\\n    constructor (address _repository, address _siloAsset) {\\n        require(Ping.pong(_repository, ISiloRepository.siloRepositoryPing.selector), \\\"invalid _repository\\\");\\n\\n        uint256 decimals = Ping.decimals(_siloAsset);\\n        require(decimals != 0, \\\"invalid _siloAsset\\\");\\n\\n        siloRepository = ISiloRepository(_repository);\\n        siloAsset = _siloAsset;\\n        ASSET_DECIMAL_POINTS = 10**decimals;\\n    }\\n\\n    /// @dev this is exposed only for test purposes, but it is safe to leave it like that\\n    function initAssetsTokens() external {\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function syncBridgeAssets() external override {\\n        // sync removed assets\\n        address[] memory removedBridgeAssets = siloRepository.getRemovedBridgeAssets();\\n\\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\\n            // If removed bridge asset is a silo asset for this silo, do not remove it\\n            if (removedBridgeAssets[i] != siloAsset) {\\n                assetInterestData[removedBridgeAssets[i]].status = AssetStatus.Removed;\\n            }\\n        }\\n\\n        // must be called at the end, because we overriding `state[removedBridgeAssets[i]].removed`\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\\n        return state[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function interestData(address _asset) external view override returns (AssetInterestData memory) {\\n        return assetInterestData[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function utilizationData(address _asset) external view override returns (UtilizationData memory data) {\\n        return UtilizationData(\\n            state[_asset].totalDeposits,\\n            state[_asset].totalBorrowAmount,\\n            assetInterestData[_asset].interestRateTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssets() public view override returns (address[] memory assets) {\\n        return allSiloAssets;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssetsWithState() public view override returns (\\n        address[] memory assets,\\n        AssetStorage[] memory assetsStorage\\n    ) {\\n        assets = allSiloAssets;\\n        assetsStorage = new AssetStorage[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            assetsStorage[i] = state[assets[i]];\\n        }\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function isSolvent(address _user) public view override returns (bool) {\\n        require(_user != address(0), \\\"BaseSilo: user != address(0)\\\");\\n\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 liquidationThreshold) = Solvency.calculateLTVs(\\n            Solvency.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            Solvency.TypeofLTV.LiquidationThreshold\\n        );\\n\\n        return userLTV <= liquidationThreshold;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\\n        return state[_asset].debtToken.balanceOf(_depositor) == 0\\n            && assetInterestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\\n        return state[_asset].collateralToken.balanceOf(_borrower) == 0\\n            && state[_asset].collateralOnlyToken.balanceOf(_borrower) == 0\\n            && assetInterestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\\n    /// @param _tokensFactory factory contract that deploys collateral and debt tokens\\n    /// @param _asset which asset to initialize\\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\\n        // Naming convention in UNI example:\\n        // - for siloAsset: SiloUNI, Debt-SiloUNI, SiloUNI-collateral-ONLY\\n        // - for bridgeAsset: SiloUNI-ETH, Debt-SiloUNI-ETH, SiloUNI-ETH-collateral-ONLY\\n        string memory collateralName;\\n        string memory debtName;\\n        string memory assetSymbol = TokenSymbol.symbol(_asset);\\n\\n        if (_isBridgeAsset) {\\n            string memory baseSymbol = state[siloAsset].collateralToken.symbol();\\n            collateralName = string(abi.encodePacked(baseSymbol, string(\\\"-\\\"), assetSymbol));\\n        } else {\\n            string memory baseSymbol = \\\"Silo\\\";\\n            collateralName = string(abi.encodePacked(baseSymbol, assetSymbol));\\n        }\\n\\n        string memory collateralOnlyName = string(abi.encodePacked(collateralName, string(\\\"-collateral-ONLY\\\")));\\n\\n        debtName = string(abi.encodePacked(string(\\\"Debt-\\\"), collateralName));\\n\\n        state[_asset].collateralToken = _tokensFactory.createShareCollateralToken(\\n            collateralName, collateralName, _asset\\n        );\\n\\n        state[_asset].collateralOnlyToken = _tokensFactory.createShareCollateralToken(\\n            collateralOnlyName, collateralOnlyName, _asset\\n        );\\n\\n        state[_asset].debtToken = _tokensFactory.createShareDebtToken(debtName, debtName, _asset);\\n\\n        // keep synced asset in storage array\\n        allSiloAssets.push(_asset);\\n        assetInterestData[_asset].status = AssetStatus.Active;\\n    }\\n\\n    /// @dev Initializes all assets (bridge assets + unique asset) for Silo but only if asset has not been\\n    /// initialized already. It's safe to call it multiple times. It's safe for anyone to call it at any time.\\n    function _initAssetsTokens() internal {\\n        ITokensFactory tokensFactory = siloRepository.tokensFactory();\\n\\n        // init silo asset if needed\\n        if (address(state[siloAsset].collateralToken) == address(0)) {\\n            _initAsset(tokensFactory, siloAsset, false);\\n        }\\n\\n        // sync active assets\\n        address[] memory bridgeAssets = siloRepository.getBridgeAssets();\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            // In case a bridge asset is added that already has a Silo,\\n            // do not initiate that asset in its Silo\\n            if (address(state[bridgeAssets[i]].collateralToken) == address(0)) {\\n                _initAsset(tokensFactory, bridgeAssets[i], true);\\n            }\\n        }\\n    }\\n\\n    /// @dev Main deposit function that handles all deposit logic and validation\\n    /// @param _asset asset address that is being deposited\\n    /// @param _from wallet address form which to pull asset tokens\\n    /// @param _depositor wallet address that will be granted ownership of deposited tokens. Keep in mind\\n    /// that deposit can be made by Router contract but the owner of the deposit should be user.\\n    /// @param _amount deposit amount\\n    /// @param _collateralOnly true if deposit should be used for collateral only. Otherwise false.\\n    /// Collateral only deposit cannot be borrowed by anyone and does not earn any interest. However,\\n    /// it can be used as collateral and can be subject to liquidaiton.\\n    function _deposit(\\n        address _asset,\\n        address _from,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant\\n        validateMaxDepositsAfter(_asset)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD! we can allow for checks to be run before\\n        _accrueInterest(_asset, block.timestamp);\\n\\n        if (!depositPossible(_asset, _depositor)) revert(\\\"DepositNotPossible()\\\");\\n\\n        AssetStorage storage _state = state[_asset];\\n\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\\n\\n        if (_collateralOnly) {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\\n            _state.collateralOnlyToken.mint(_depositor, share);\\n        } else {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\\n            _state.totalDeposits = totalDepositsCached + _amount;\\n            _state.collateralToken.mint(_depositor, share);\\n        }\\n\\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @dev Main withdraw function that handles all withdraw logic and validation\\n    /// @param _asset asset address that is being withdrawn\\n    /// @param _depositor wallet address that is an owner of the deposited tokens\\n    /// @param _receiver wallet address that will receive withdrown tokens. It's possible that Router\\n    /// contract is the owner of deposited tokens but we want user to get these tokens derectly.\\n    /// @param _amount amount to withdraw. If amount is equal to maximum value stored by uint256 type\\n    /// (type(uint256).max), it will be assumed that user wants to withdraw all tokens and final acount\\n    /// will be dynamically calculated including interest.\\n    /// @param _collateralOnly true if collateral only tokens are to be withdrawn. Otherwise false.\\n    /// User can deposit the same asset as collateral only and as regular deposit. During withdraw,\\n    /// it must be specified which tokens are to be withdrawn.\\n    function _withdraw(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        internal\\n        nonReentrant // because we transferring tokens\\n        onlyExistingAsset(_asset)\\n        returns (uint256 amount)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset, block.timestamp);\\n\\n        AssetStorage storage _state = state[_asset];\\n        uint256 burnedShare;\\n\\n        if (_collateralOnly) {\\n            uint256 collateralOnlyDepositsCached = _state.collateralOnlyDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                collateralOnlyDepositsCached,\\n                _amount,\\n                _state.collateralOnlyToken,\\n                _depositor,\\n                _receiver,\\n                0 // do not apply any fees on regular withdraw\\n            );\\n\\n            _state.collateralOnlyDeposits = collateralOnlyDepositsCached - _amount;\\n        } else {\\n            uint256 totalDepositsCached = _state.totalDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                totalDepositsCached,\\n                _amount,\\n                _state.collateralToken,\\n                _depositor,\\n                _receiver,\\n                0 // do not apply any fees on regular withdraw\\n            );\\n\\n            _state.totalDeposits = totalDepositsCached - _amount;\\n        }\\n\\n        require(isSolvent(_depositor), \\\"BaseSilo: not solvent in silo position\\\");\\n\\n        emit Withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n        return _amount;\\n    }\\n\\n    /// @dev Main borrow function that handles all borrow logic and validation\\n    /// @param _asset asset address that is being borrowed\\n    /// @param _borrower wallet address that will own debt\\n    /// @param _receiver wallet address that will receive borrowed tokens. It's possible that Router\\n    /// contract is executing borrowing for user and should be the one receiving tokens, however,\\n    /// the owner of the debt should be user himself.\\n    /// @param _amount amount of asset to borrow\\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount) internal nonReentrant {\\n        if (!borrowPossible(_asset, _borrower)) revert(\\\"BorrowNotPossible\\\");\\n\\n        require(_liquidity(_asset) >= _amount, \\\"BaseSilo: deposit shortage\\\");\\n\\n        AssetStorage storage _state = state[_asset];\\n\\n        // MUST BE CALLED AS FIRST METHOD! we can allow for checks to be before it\\n        _accrueInterest(_asset, block.timestamp);\\n\\n        uint256 totalBorrowAmount = _state.totalBorrowAmount;\\n        uint256 entryFee = siloRepository.entryFee();\\n        uint256 fee = entryFee == 0 ? 0 : _amount * entryFee / Solvency._PRECISION_DECIMALS;\\n        uint256 borrowerShare = (_amount + fee).toShare(totalBorrowAmount, _state.debtToken.totalSupply());\\n\\n        _state.debtToken.mint(_borrower, borrowerShare);\\n        _state.totalBorrowAmount = totalBorrowAmount + _amount + fee;\\n        // state[_asset].totalBorrowAmount = _state.totalBorrowAmount;\\n        assetInterestData[_asset].protocolFees += fee;\\n\\n        emit Borrow(_asset, _borrower, _amount);\\n        ERC20(_asset).safeTransfer(_receiver, _amount);\\n\\n        // IMPORTANT - keep `validateBorrowAfter` at the end\\n        _validateBorrowAfter(_borrower);\\n    }\\n\\n    /// @dev Main repay function that handles all repay logic and validation\\n    /// @param _asset asset address that is being repaid\\n    /// @param _borrower wallet address for which debt is being repaid\\n    /// @param _repayer wallet address that will pay the debt. It's possible that Router\\n    /// contract is executing repay for user and should be the one paying the debt.\\n    /// @param _amount amount of asset to repay\\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\\n        internal\\n        onlyExistingAsset(_asset)\\n        returns (uint256)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset, block.timestamp);\\n\\n        AssetStorage storage _assetStorage = state[_asset];\\n        uint256 repayShare;\\n\\n        (_amount, repayShare) = _calculateAmountAndShare(_assetStorage, _borrower, _amount);\\n\\n        if (repayShare == 0) {\\n            return 0;\\n        }\\n\\n        emit Repay(_asset, _borrower, _amount);\\n\\n        // we checking balances in case of fee on transfer tokens or any other weird stuff\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n        require(balanceAfter - balanceBefore >= _amount, \\\"Silo: transferred amount is lower that required amount\\\");\\n\\n        // we do not using reentrancy, so just in case change status about debt after token transfer\\n        _assetStorage.debtToken.burn(_borrower, repayShare);\\n        _assetStorage.totalBorrowAmount -= _amount;\\n\\n        return _amount;\\n    }\\n\\n    /// @param _assets all currant assets, this is optimisation, so we don't have to read it from storage few times\\n    /// @param _user user to liquidate\\n    /// @param _flashReceiver address which will get all collaterals and will be notified once collaterals will be send\\n    /// @param _flashReceiverData custom data to forward to receiver\\n    /// @return receivedCollaterals amounts of collaterals transferred to `_flashReceiver`\\n    /// @return shareAmountsToRepay expected amounts to repay\\n    function _userLiquidation(\\n        address[] memory _assets,\\n        address _user,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        internal\\n        nonReentrant // because of _flashReceiver.siloLiquidationCallback\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\\n    {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) {\\n            uint256[] memory empty = new uint256[](_assets.length);\\n            return (empty, empty);\\n        }\\n\\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, address(_flashReceiver));\\n\\n        // _flashReceiver needs to repayFor user\\n        _flashReceiver.siloLiquidationCallback(\\n            _user,\\n            _assets,\\n            receivedCollaterals,\\n            shareAmountsToRepay,\\n            _flashReceiverData\\n        );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\\n            }\\n        }\\n\\n        require(isSolvent(_user), \\\"Silo: user not solvent\\\");\\n    }\\n\\n    function _flashUserLiquidation(address[] memory _allSiloAssets, address _borrower, address _liquidator)\\n        internal\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\\n    {\\n        uint256 blockTimestamp = block.timestamp;\\n        uint256 assetsLength = _allSiloAssets.length;\\n        receivedCollaterals = new uint256[](assetsLength);\\n        amountsToRepay = new uint256[](assetsLength);\\n\\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\\n\\n        for (uint256 i = 0; i < assetsLength; i++) {\\n            AssetStorage storage _state = state[_allSiloAssets[i]];\\n\\n            _accrueInterest(_allSiloAssets[i], blockTimestamp);\\n            // we do not allow for partial repayment on liquidation, that's why max\\n            (amountsToRepay[i],) = _calculateAmountAndShare(_state, _borrower, type(uint256).max);\\n\\n            (, uint256 withdrawnOnlyAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.collateralOnlyDeposits,\\n                type(uint256).max,\\n                _state.collateralOnlyToken,\\n                _borrower,\\n                _liquidator,\\n                protocolLiquidationFee\\n            );\\n\\n            (, uint256 withdrawnAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.totalDeposits,\\n                type(uint256).max,\\n                _state.collateralToken,\\n                _borrower,\\n                _liquidator,\\n                protocolLiquidationFee\\n            );\\n\\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\\n        }\\n    }\\n\\n    /// @dev Utility function for withdrawing an asset\\n    /// @param _asset asset to withdraw\\n    /// @param _assetTotalDeposits amount of total deposits for asset. It is used to calcualte a share\\n    /// of total assets deposited. A share is amount of share token that will be burn.\\n    /// @param _assetAmount amount of asset to withdraw\\n    /// @param _shareToken ERC20 token that represents ownership of deposited asset. Its address is saved\\n    /// in AssetStorage.\\n    /// @param _depositor wallet address that is an owner of the deposit\\n    /// @param _receiver wallet address that is receiving the token\\n    /// @param _protocolLiquidationFee if provided (!=0) liquidation fees will be applied and returned\\n    /// `withdrawnAmount` will be decreased\\n    /// @return burnedShare amount of collateral token representing deposit ownership that has been burned\\n    /// @return withdrawnAmount amount of asset that has been sent to receiver\\n    function _withdrawAsset(\\n        address _asset,\\n        uint256 _assetTotalDeposits,\\n        uint256 _assetAmount,\\n        IShareToken _shareToken,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _protocolLiquidationFee\\n    )\\n        internal\\n        returns (uint256 burnedShare, uint256 withdrawnAmount)\\n    {\\n        if (_assetAmount == type(uint256).max) {\\n            burnedShare = _shareToken.balanceOf(_depositor);\\n            withdrawnAmount = burnedShare.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\\n        } else {\\n            burnedShare = _assetAmount.toShare(_assetTotalDeposits, _shareToken.totalSupply());\\n            withdrawnAmount = _assetAmount;\\n        }\\n\\n        if (withdrawnAmount == 0) return (0, 0);\\n\\n        _shareToken.burn(_depositor, burnedShare);\\n\\n        if (_protocolLiquidationFee != 0) {\\n            withdrawnAmount = _applyLiquidationFee(_asset, withdrawnAmount, _protocolLiquidationFee);\\n        }\\n\\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\\n        ERC20(_asset).safeTransfer(_receiver, withdrawnAmount);\\n    }\\n\\n    /// @notice Calculates liquidations fee and returns amount of asset transferred to liquidator\\n    /// @param _asset asset address\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _protocolLiquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\\n    /// @return change amount left after subtracting liquidation fee\\n    function _applyLiquidationFee(address _asset, uint256 _amount, uint256 _protocolLiquidationFee)\\n        internal\\n        returns (uint256 change)\\n    {\\n        uint256 liquidationFeeAmount;\\n\\n        (\\n            liquidationFeeAmount,\\n            assetInterestData[_asset].protocolFees\\n        ) = Solvency.calculateLiquidationFee(assetInterestData[_asset].protocolFees, _amount, _protocolLiquidationFee);\\n\\n        unchecked {\\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\\n            change = _amount - liquidationFeeAmount;\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from particular asset\\n    /// @param _asset asset we want to harvest fees from\\n    /// @param _receiver address of fees receiver\\n    function _harvestProtocolFees(address _asset, address _receiver) internal {\\n        AssetInterestData storage data = assetInterestData[_asset];\\n\\n        uint256 protocolFeesCached = data.protocolFees;\\n        uint256 availableFees = protocolFeesCached - data.harvestedProtocolFees;\\n        if (availableFees == 0) return;\\n\\n        data.harvestedProtocolFees = protocolFeesCached;\\n        ERC20(_asset).safeTransfer(_receiver, availableFees);\\n    }\\n\\n    /// @notice Accrue interest for asset\\n    /// @dev Silo Interest Rate Model implements dynamic interest rate that changes every second. Returned\\n    /// interest rate by the model is compounded rate so it can be used in math calculations as if it was\\n    /// static. Rate is calculated for the time range between last update and provided timestamp.\\n    /// @param _asset address of the asset for which interest should be accrued\\n    /// @param _blockTimestamp this should always be current timestamp\\n    function _accrueInterest(address _asset, uint256 _blockTimestamp) internal {\\n        /// @dev `_accrueInterest` is called on every user action, including liquidation. It's enough to check\\n        /// if Silo is paused in this function.\\n        require(!IGuardedLaunch(address(siloRepository)).isSiloPaused(address(this), _asset), \\\"Silo: paused\\\");\\n\\n        AssetStorage storage _state = state[_asset];\\n        AssetInterestData storage _assetInterestData = assetInterestData[_asset];\\n\\n        if (_blockTimestamp == _assetInterestData.interestRateTimestamp) {\\n            return;\\n        }\\n\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, _blockTimestamp);\\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\\n\\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\\n\\n        uint256 totalInterest = totalBorrowAmountCached * rcomp / Solvency._PRECISION_DECIMALS;\\n        uint256 protocolShare = totalInterest * protocolShareFee / Solvency._PRECISION_DECIMALS;\\n        uint256 depositorsShare = totalInterest - protocolShare;\\n\\n        // update contract state\\n        _state.totalBorrowAmount = totalBorrowAmountCached + totalInterest;\\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\\n        _assetInterestData.protocolFees = _assetInterestData.protocolFees + protocolShare;\\n        _assetInterestData.interestRateTimestamp = uint64(_blockTimestamp);\\n    }\\n\\n    /// @dev Amount of token that is available for borrowing.\\n    /// @return Silo liquidity\\n    function _liquidity(address _asset) internal view returns (uint256) {\\n        return ERC20(_asset).balanceOf(address(this)) - state[_asset].collateralOnlyDeposits;\\n    }\\n\\n    /// @dev gets interest rates model object\\n    /// @param _asset asset for which to calculate interest rate\\n    /// @return IInterestRateModel interest rates model object\\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(this), _asset));\\n    }\\n\\n    /// @dev calculates amount to repay based on user shares, we do not apply virtual balances here,\\n    /// if needed, thay need to be apply beforehand\\n    /// @param _assetStorage asset storage struct\\n    /// @param _borrower borrower address\\n    /// @param _amount proposed amount of asset to repay. Based on that,`repayShare` is cacluated.\\n    /// @return amount amount of asset to repay\\n    /// @return repayShare amount of debt token representing debt ownership\\n    function _calculateAmountAndShare(AssetStorage storage _assetStorage, address _borrower, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 amount, uint256 repayShare)\\n    {\\n        uint256 borrowerDebtShare = _assetStorage.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\\n\\n        if (_amount == type(uint256).max) {\\n            repayShare = borrowerDebtShare;\\n            amount = repayShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n        } else {\\n            uint256 maxAmount = borrowerDebtShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n\\n            if (_amount <= maxAmount) {\\n                repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\\n                amount = _amount;\\n            } else {\\n                repayShare = borrowerDebtShare;\\n                amount = maxAmount;\\n            }\\n        }\\n    }\\n\\n    /// @dev verifies if user did not borrow more than allowed maximum\\n    function _validateBorrowAfter(address _user) private view {\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 userMaximumLTV) = Solvency.calculateLTVs(\\n            Solvency.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            Solvency.TypeofLTV.MaximumLTV\\n        );\\n\\n        require(userLTV <= userMaximumLTV, \\\"BaseSilo: maximumLTV\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x04e89566e7ce0455072ac38a9bbef202aeb3844705bf1bc4b284dfc6d42fc5a0\",\"license\":\"BUSL-1.1\"},\"contracts/Error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nerror AddressZeroAsInput();\\n\\nerror InvalidTokenAddress();\\n\\nerror AssetIsNotABridge();\\n\\nerror AccessDenied();\\n\\nerror CanNotRemoveLastBridgeAssets();\\n\\nerror AssetNotExists();\\n\\nerror SiloAlreadyExistsForAsset();\\n\\nerror SiloNotAllowedForBridgeAsset();\\n\\nerror SiloNotExists();\\n\\nerror SiloForBridgeAssetsAlreadyExists();\\n\\nerror BorrowNotPossible();\\n\\nerror NoPriceProviderForAsset();\\n\\nerror DepositNotPossible();\\n\\nerror ShareTransferNotAllowed();\\n\\nerror IncorrectDataLength();\\n\",\"keccak256\":\"0xbb8ad91c6afd3dfef65f35912971624b914df7da3062e7fba07938acbc00dece\",\"license\":\"BUSL-1.1\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./BaseSilo.sol\\\";\\n\\n/// @title ISilo\\n/// @notice Silo is the main component of the protocol. It implements lending logic, manages and isolates\\n/// risk, acts as a vault for assets, and performs liquidations. Each Silo is composed of the unique asset\\n/// for which it was created (ie. UNI) and bridge assets (ie. ETH and SiloDollar). There may be multiple\\n/// bridge assets at any given time.\\n/// @dev Main Silo contact that inherits from Base contract. It implements all user/UI facing methods.\\n/// @custom:security-contact security@silo.finance\\ncontract Silo is ISilo, BaseSilo {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    constructor (address _repository, address _siloAsset) BaseSilo(_repository, _siloAsset) {}\\n\\n    /// @inheritdoc ISilo\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external override onlyRouter {\\n        _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrow(address _asset, uint256 _amount) external override {\\n        _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repay(address _asset, uint256 _amount) external override {\\n        _repay(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repayFor(address _asset, address _borrower, uint256 _amount) external override {\\n        require(!isSolvent(_borrower), \\\"Silo.repayFor: borrower is solvent\\\");\\n\\n        _repay(_asset, _borrower, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        override\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepay\\n        )\\n    {\\n        assets = getAssets();\\n        uint256 usersLength = _users.length;\\n        receivedCollaterals = new uint256[][](usersLength);\\n        shareAmountsToRepay = new uint256[][](usersLength);\\n\\n        for (uint256 i = 0; i < usersLength; i++) {\\n            (\\n                receivedCollaterals[i],\\n                shareAmountsToRepay[i]\\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function harvestProtocolFees(address[] calldata _assets) external override {\\n        address repositoryOwner = siloRepository.owner();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            _harvestProtocolFees(_assets[i], repositoryOwner);\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function accrueInterest(address _asset) public override {\\n        _accrueInterest(_asset, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xe8d58354d132326a3f67bcf48f1cd0fa8e6c114648994cdc6d49b037a64d3797\",\"license\":\"BUSL-1.1\"},\"contracts/SiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./Silo.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\n\\n/// @title SiloFactory\\n/// @notice Silo Factory has one job, deploy Silo implementaiton\\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\\n/// is differet Silo Factory that deploys different Silo implementation. Many Factory contracts can be\\n/// registered with the Repository contract.\\n/// @custom:security-contact security@silo.finance\\ncontract SiloFactory is ISiloFactory {\\n    /// @inheritdoc ISiloFactory\\n    function createSilo(address _siloAsset, bytes memory) external override returns (address silo) {\\n        // disallow EOA calls to minimize non-SiloRepository Silo deployments, just for esthetics\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(tx.origin != msg.sender, \\\"SiloFactory: no pollution!\\\");\\n\\n        silo = address(new Silo(msg.sender, _siloAsset));\\n        emit NewSiloCreated(silo, _siloAsset);\\n    }\\n\\n    function siloFactoryPing() external pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf4a4737cc6a55c41b7cc5fa9e2bd1f1013a478a0217e5bad3e35d435129f733c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\nimport \\\"./ISiloRepository.sol\\\";\\n\\ninterface IBaseSilo {\\n    enum AssetStatus { Undefined, Active, Removed }\\n\\n    /// @dev Storage struct that holds all required data for a single token market\\n    struct AssetStorage {\\n        /// @dev Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        /// It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    /// @dev Storage struct that holds data related to fees and interest\\n    struct AssetInterestData {\\n        /// @dev Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\\n        /// generated interest.\\n        uint256 protocolFees;\\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\\n        uint64 interestRateTimestamp;\\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\\n        /// for that asset\\n        AssetStatus status;\\n    }\\n\\n    /// @notice data that InterestModel needs for calculations\\n    struct UtilizationData {\\n        uint256 totalDeposits;\\n        uint256 totalBorrowAmount;\\n        /// @dev timestamp of last interest accrual\\n        uint64 interestRateTimestamp;\\n    }\\n\\n    /// @notice Emitted when deposit is made\\n    /// @param asset asset address that was deposited\\n    /// @param depositor wallet address that deposited asset\\n    /// @param amount amount of asset that was deposited\\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    /// @notice Emitted when withdraw is made\\n    /// @param asset asset address that was withdrawn\\n    /// @param depositor wallet address that deposited asset\\n    /// @param receiver wallet address that received asset\\n    /// @param amount amount of asset that was withdrew\\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    /// @notice Emitted on asset borrow\\n    /// @param asset asset address that was borrowed\\n    /// @param user wallet address that borrowed asset\\n    /// @param amount amount of asset that was borrowed\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on asset repay\\n    /// @param asset asset address that was repaid\\n    /// @param user wallet address that repaid asset\\n    /// @param amount amount of asset that was repaid\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on user liquidation\\n    /// @param asset asset address that was liquidated\\n    /// @param user wallet address that was liquidated\\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\\n    /// ownership of underlying deposit.\\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\\n\\n    /// @notice Synchronize current bridge assets with Silo\\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\\n    /// should be disabled during asset sync.\\n    function syncBridgeAssets() external;\\n\\n    /// @notice Get Silo Repository contract address\\n    /// @return Silo Repository contract address\\n    function siloRepository() external view returns (ISiloRepository);\\n\\n    /// @notice Get asset storage data\\n    /// @param _asset asset address\\n    /// @return AssetStorage struct\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    /// @notice Get asset interest data\\n    /// @param _asset asset address\\n    /// @return AssetInterestData struct\\n    function interestData(address _asset) external view returns (AssetInterestData memory);\\n\\n    /// @dev helper method for InterestRateModel calculations\\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\\n\\n    /// @notice Calculates solvency of an account\\n    /// @param _user wallet address for which solvency is calculated\\n    /// @return true if solvent, false otherwise\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// @return assets array of initialized assets of Silo\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// with corresponding state\\n    /// @return assets array of initialized assets of Silo\\n    /// @return assetsStorage array of assets state corresponding to `assets` array\\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\\n\\n    /// @notice Check if depositing an asset for given account is possible\\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @notice Check if borrowing an asset for given account is possible\\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76e6ad63cf64bb49c5be4468950b545492265e0d200f6e16569f787fd1f5d08b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IGuardedLaunch {\\n    /// @dev Stores info about maximum allowed liquidity in a Silo. This limit applies to deposit only.\\n    struct MaxLiquidityLimit {\\n        /// @dev flag to turn on/off all limits for all Silos\\n        bool globalToggle;\\n        /// @dev default value represents maximum allowed liquidity in Silo\\n        uint256 defaultMaxLiquidity;\\n        /// @notice siloMaxLiquidity maps silo => asset => maximum allowed deposit liquidity.\\n        /// @dev Deposit liquidity limit is denominated in ETH. For example, if set to 1e18, it means that any given\\n        /// Silo is allowed for deposits up to 1 ETH of value. Value is calculated using prices form the Oracle.\\n        mapping(address => mapping(address => uint256)) siloMaxLiquidity;\\n    }\\n\\n    /// @dev Stores info about paused Silos\\n    /// if `globalPause` == `true`, all Silo are pasued\\n    /// if `globalPause` == `false` and `siloPause[silo][0x0]` == `ture`, all assets in a `silo` are paused\\n    /// if `globalPause` == `false` and `siloPause[silo][asset]` == `ture`, only `asset` in a `silo` is paused\\n    struct Paused {\\n        bool globalPause;\\n        /// @dev maps silo address to asset address to bool\\n        mapping(address => mapping(address => bool)) siloPause;\\n    }\\n\\n    /// @notice Emitted when all Silos are paused or unpaused\\n    /// @param globalPause current value of `globalPause`\\n    event GlobalPause(bool globalPause);\\n\\n    /// @notice Emitted when asingle Silo or single asset in a Silo is paused or unpaused\\n    /// @param silo address of Silo which is paused\\n    /// @param asset address of an asset which is paused\\n    /// @param pauseValue true when paused, otherwise false\\n    event SiloPause(address silo, address asset, bool pauseValue);\\n\\n    /// @notice Emitted when max liquidity toggle is switched\\n    /// @param newLimitedMaxLiquidityState new value for max liquidity toggle\\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\\n\\n    /// @notice Emitted when deposit liquidity limit is changed for Silo and asset\\n    /// @param silo Silo address for which to set limit\\n    /// @param asset Silo asset for which to set limit\\n    /// @param newMaxDeposits deposit limit amount in ETH\\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\\n\\n    /// @notice Emitted when default max liquidity limit is changed\\n    /// @param newMaxDeposits new deposit limit in ETH\\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\\n\\n    /// @notice Switch to turn on and off limited liquidity\\n    function toggleLimitedMaxLiquidity() external;\\n\\n    /// @notice Sets default deposit limit for all Silos\\n    /// @param _maxDeposits deposit limit amount in ETH\\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external;\\n\\n    /// @notice Sets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @param _maxDeposits deposit limit amount in ETH\\n    function setSiloMaxDepositsLimit(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxDeposits\\n    ) external;\\n\\n    /// @notice Pause all Silos\\n    /// @dev Callable only by owner.\\n    /// @param _globalPause true to pause all Silos, otherwise false\\n    function setGlobalPause(bool _globalPause) external;\\n\\n    /// @notice Pause single asset in a single Silo\\n    /// @dev Callable only by owner.\\n    /// @param _silo address of Silo in which `_asset` is being paused\\n    /// @param _asset address of an asset that is being paused\\n    /// @param _pauseValue true to pause, false to unpause\\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external;\\n\\n    /// @notice Check given asset in a Silo is paused\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return true if given asset in a Silo is paused, otherwise false\\n    function isSiloPaused(address _silo, address _asset) external view returns (bool);\\n\\n    /// @notice Gets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @return deposit limit for Silo\\n    function getMaxSiloDeposits(address _silo, address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b5ab56ad155542b9a63cc7d4e8f74f652f8a6822f2a7665230f249f18cbe7eb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for giver asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for giver asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config sturct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x19e6633d7dea9df2f41b8617d1adc0663aee37c66ba5eaabc4adcd8eb3ec54dc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb48b97fe9aeca820bd8e067fb9682b577933e6653f5bf0617ab68f4f54a23ead\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffor for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xe7465c2a0138997490bb500af8359950251b2aa7bcbdf05c232ab38ea5a156d5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Check if prices are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of pice providers registerd\\n    /// @return number of pice providers registerd\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check funciton\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x060ebf77b1036628cb17549f9831aaab80aa164169a49e561428826c1340714e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt positon\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt positon\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /// @notice Returns token symbol\\n    /// @return token symbol\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2c231826b52ad5824db47830d686afa8e41dfc08b5f78f1a533ad2025fef5cb7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address of the collateral tokens source account\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external;\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address of the debt tokens receiver\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount) external;\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repayFor(address _asset, address _borrower, uint256 _amount) external;\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @param _assets array of assets we want to harvest fees from\\n    function harvestProtocolFees(address[] calldata _assets) external;\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    function accrueInterest(address _asset) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\\n    /// @param _users array of users to liquidate\\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    /// amounts of collaterals send to `_flashReceiver`\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    /// required amounts of debt to be repaid\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0xa77aca4e9cc89ed4758aabb4fc9e81030e68aabfb61193922ca7a8e8f6d0a500\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of assset for which Silo was deployed\\n    event NewSiloCreated(address indexed silo, address indexed asset);\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x8c339cc5ed5e5c5050a43478a2e55df6268a46efea6eff8b8e415b8108687d96\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (BaseSilo.PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (BaseSilo.PRECISION_DECIMALS()).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param oldProvider address of old oracle repository\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository oldProvider,\\n        IPriceProvidersRepository newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param oldTokensFactory address of old token factory\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param oldRouter address of old router\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registerd Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregisterd Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param oldDefaultVersion old default version\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 oldDefaultVersion, uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function newSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS()). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for detailes see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(address _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Set default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possbile that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possbile that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb9a54186c0e9c0c304fa3cb1e12b4b7563d7c2de3a197098a00e2dcf10de6147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xc9897a2129b8d90ab9e89520fb5b5c2941b38c9631f556feaf2bd3dd006ac632\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n\\n    function toValue(uint256 _assetAmount, uint256 _assetPrice, uint256 _assetDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _assetAmount * _assetPrice / 10 ** _assetDecimals;\\n    }\\n\\n    function sum(uint256[] memory _numbers) internal pure returns (uint256 s) {\\n        for(uint256 i; i < _numbers.length; i++) {\\n            s += _numbers[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e0b6e30620fe2d1bc9ddd17ccacd96615c537b7838219fc225ad0c64d7f24f2\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nlibrary Ping {\\n    function pong(address _contract, bytes4 _selector) internal view returns (bool) {\\n        if (_contract == address(0)) return false;\\n\\n        (bool success, bytes memory data) = _contract.staticcall(abi.encodeWithSelector(_selector));\\n        return success && abi.decode(data, (bool));\\n    }\\n\\n    function decimals(address _contract) internal view returns (uint256) {\\n        if (_contract == address(0)) return 0;\\n\\n        (bool success, bytes memory data) = _contract.staticcall(abi.encodeWithSelector(ERC20.decimals.selector));\\n        if (!success) return 0;\\n\\n        return abi.decode(data, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x08ec301de876bf746df001a7ed87f50d97edcfb0e12483ec98f72f96138b054d\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Solvency.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../interfaces/IInterestRateModel.sol\\\";\\nimport \\\"../interfaces/ISiloRepository.sol\\\";\\nimport \\\"../Error.sol\\\";\\n\\nimport \\\"./EasyMath.sol\\\";\\n\\nlibrary Solvency {\\n    using EasyMath for uint256;\\n\\n    /// @notice\\n    /// MaximumLTV - Maximum Loan-to-Value ratio represents the maximum borrowing power of all user's collateral\\n    /// positions in a Silo\\n    /// LiquidationThreshold - Liquidation Threshold represents the threshold at which all user's borrow positions\\n    /// in a Silo will be considered under collateralized and subject to liquidation\\n    enum TypeofLTV { MaximumLTV, LiquidationThreshold }\\n\\n    struct SolvencyParams {\\n        /// @param siloRepository SiloRepository address\\n        ISiloRepository siloRepository;\\n        /// @param silo Silo address\\n        ISilo silo;\\n        /// @param assets array with assets\\n        address[] assets;\\n        /// @param assetStates array of states for each asset, where index match the `assets` index\\n        ISilo.AssetStorage[] assetStates;\\n        /// @param user wallet address for which to read debt\\n        address user;\\n    }\\n\\n    /// @dev is value that used for integer calculations and decimal points for utilisation ratios, LTV, protocol fees\\n    uint256 internal constant _PRECISION_DECIMALS = 1e18;\\n    uint256 internal constant _INFINITY = type(uint256).max;\\n\\n    /// @notice Returns current user LTV and second LTV chosen in params\\n    /// @dev This function is optimized for protocol use. In some cases there is no need to keep the calculation\\n    /// going and predefined results can be returned.\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @param _secondLtvType type of LTV to be returned as second value\\n    /// @return currentUserLTV Loan-to-Value ratio represents current user's proportion of debt to collateral\\n    /// @return secondLTV second type of LTV, could be TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    function calculateLTVs(SolvencyParams memory _params, TypeofLTV _secondLtvType)\\n        internal\\n        view\\n        returns (uint256 currentUserLTV, uint256 secondLTV)\\n    {\\n        uint256[] memory totalBorrowAmounts = getBorrowAmounts(_params);\\n\\n        // this return avoids eg. additional checks on withdraw, when user did not borrow any asset\\n        if (EasyMath.sum(totalBorrowAmounts) == 0) return (0, 0);\\n\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory borrowValues = convertAmountsToValues(\\n            priceProvidersRepository,\\n            _params.assets,\\n            totalBorrowAmounts\\n        );\\n\\n        // value of user's total debt\\n        uint256 borrowTotalValue = EasyMath.sum(borrowValues);\\n\\n        if (borrowTotalValue == 0) return (0, 0);\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return (_INFINITY, 0);\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _secondLtvType,\\n            collateralValues\\n        );\\n\\n        currentUserLTV = borrowTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n\\n        // one of Solvency.TypeofLTV\\n        secondLTV = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Calculates chosen LTV limit\\n    /// @dev This function should be used by external actors like SiloLens and UI/subgraph. `calculateLTVs` is\\n    /// optimized for protocol use and may not return second LVT calcualtion when they are not needed.\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @param _ltvType acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @return limit theoretical LTV limit of `_ltvType`\\n    function calculateLTVLimit(SolvencyParams memory _params, TypeofLTV _ltvType)\\n        internal\\n        view\\n        returns (uint256 limit)\\n    {\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return 0;\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _ltvType,\\n            collateralValues\\n        );\\n\\n        limit = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Returns worth (in ETH) of each collateral deposit of a user\\n    /// @param _priceProvidersRepository address of IPriceProvidersRepository where prices are read\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralValues worth of each collateral deposit of a user as an array\\n    function getUserCollateralValues(IPriceProvidersRepository _priceProvidersRepository, SolvencyParams memory _params)\\n        internal\\n        view\\n        returns(uint256[] memory collateralValues)\\n    {\\n        uint256[] memory collateralAmounts = getCollateralAmounts(_params);\\n        collateralValues = convertAmountsToValues(_priceProvidersRepository, _params.assets, collateralAmounts);\\n    }\\n\\n    /// @notice Convert assets amounts to values in ETH (amount * price)\\n    /// @param _priceProviderRepo address of IPriceProvidersRepository where prices are read\\n    /// @param _assets array with assets for which prices are read\\n    /// @param _amounts array of amounts\\n    /// @return values array of values for corresponding assets\\n    function convertAmountsToValues(\\n        IPriceProvidersRepository _priceProviderRepo,\\n        address[] memory _assets,\\n        uint256[] memory _amounts\\n    ) internal view returns (uint256[] memory values) {\\n        if (_assets.length != _amounts.length) revert IncorrectDataLength();\\n\\n        values = new uint256[](_assets.length);\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (_amounts[i] == 0) continue;\\n\\n            uint256 assetPrice = _priceProviderRepo.getPrice(_assets[i]);\\n            uint8 assetDecimals = ERC20(_assets[i]).decimals();\\n\\n            values[i] = _amounts[i].toValue(assetPrice, assetDecimals);\\n        }\\n    }\\n\\n    /// @notice Get amount of collateral for each asset\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not deposit given collateral token.\\n    function getCollateralAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory collateralAmounts)\\n    {\\n        if (_params.assetStates.length != _params.assetStates.length) revert IncorrectDataLength();\\n\\n        collateralAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 userCollateralTokenBalance = _params.assetStates[i].collateralToken.balanceOf(_params.user);\\n            uint256 userCollateralOnlyTokenBalance = _params.assetStates[i].collateralOnlyToken.balanceOf(_params.user);\\n\\n            if (userCollateralTokenBalance + userCollateralOnlyTokenBalance == 0) continue;\\n\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n\\n            collateralAmounts[i] = getUserCollateralAmount(\\n                _params.assetStates[i],\\n                userCollateralTokenBalance,\\n                userCollateralOnlyTokenBalance,\\n                rcomp,\\n                _params.siloRepository\\n            );\\n        }\\n    }\\n\\n    /// @notice Get amount of debt for each asset\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return totalBorrowAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not borrow given token.\\n    function getBorrowAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory totalBorrowAmounts)\\n    {\\n        if (_params.assets.length != _params.assetStates.length) revert IncorrectDataLength();\\n\\n        totalBorrowAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n            totalBorrowAmounts[i] = getUserBorrowAmount(_params.assetStates[i], _params.user, rcomp);\\n        }\\n    }\\n\\n    /// @notice Get amount of deposited token, including collateralOnly deposits\\n    /// @param _assetStates state of deposited asset in Silo\\n    /// @param _userCollateralTokenBalance balance of user's share collateral token\\n    /// @param _userCollateralOnlyTokenBalance balance of user's share collateralOnly token\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @param _siloRepository SiloRepository address\\n    /// @return amount of underlying token deposited, including collateralOnly deposit\\n    function getUserCollateralAmount(\\n        ISilo.AssetStorage memory _assetStates,\\n        uint256 _userCollateralTokenBalance,\\n        uint256 _userCollateralOnlyTokenBalance,\\n        uint256 _rcomp,\\n        ISiloRepository _siloRepository\\n    ) internal view returns (uint256) {\\n        uint256 assetAmount = _userCollateralTokenBalance == 0 ? 0 : _userCollateralTokenBalance.toAmount(\\n            totalDepositsWithInterest(_assetStates.totalDeposits, _siloRepository.protocolShareFee(), _rcomp),\\n            _assetStates.collateralToken.totalSupply()\\n        );\\n\\n        uint256 assetCollateralOnlyAmount = _userCollateralOnlyTokenBalance == 0\\n            ? 0\\n            : _userCollateralOnlyTokenBalance.toAmount(\\n                _assetStates.collateralOnlyDeposits,\\n                _assetStates.collateralOnlyToken.totalSupply()\\n            );\\n\\n        return assetAmount + assetCollateralOnlyAmount;\\n    }\\n\\n    /// @notice Get amount of borrowed token\\n    /// @param _assetStates state of borrowed asset in Silo\\n    /// @param _user user wallet address for which to read debt\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @return amount of borrowed token\\n    function getUserBorrowAmount(ISilo.AssetStorage memory _assetStates, address _user, uint256 _rcomp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = _assetStates.debtToken.balanceOf(_user);\\n        if (balance == 0) return 0;\\n\\n        uint256 totalBorrowAmountCached = totalBorrowAmountWithInterest(_assetStates.totalBorrowAmount, _rcomp);\\n        return balance.toAmount(totalBorrowAmountCached, _assetStates.debtToken.totalSupply());\\n    }\\n\\n    /// @notice Get compounded interest rate from the model\\n    /// @param _silo Silo address\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _asset address of asset for which to read interest rate\\n    /// @param _timestamp latest timestamp used to determine amount of time from last rate update\\n    /// @return rcomp compounded interest rate for an asset\\n    function getRcomp(ISilo _silo, ISiloRepository _siloRepository, address _asset, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256 rcomp)\\n    {\\n        IInterestRateModel model = _siloRepository.getInterestRateModel(address(_silo), _asset);\\n        rcomp = model.getCompoundInterestRate(address(_silo), _asset, _timestamp);\\n    }\\n\\n    /// @notice Returns total deposits with interest dynamically calculated at current block timestamp\\n    /// @param _assetTotalDeposits total deposits for asset\\n    /// @param _protocolShareFee `siloRepository.protocolShareFee()`\\n    /// @param _rcomp compounded interest rate from last update until now\\n    /// @return _totalDepositsWithInterests total deposits amount with interest\\n    function totalDepositsWithInterest(uint256 _assetTotalDeposits, uint256 _protocolShareFee, uint256 _rcomp)\\n        internal\\n        pure\\n        returns (uint256 _totalDepositsWithInterests)\\n    {\\n        uint256 depositorsShare = _PRECISION_DECIMALS - _protocolShareFee;\\n\\n        return _assetTotalDeposits + _assetTotalDeposits * _rcomp * depositorsShare /\\n            _PRECISION_DECIMALS / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Returns total borrow amount with interest dynamically calculated at current block timestamp\\n    /// @param _totalBorrowAmount total borrow amoutn\\n    /// @param _rcomp compounded interest rate from last update until now\\n    /// @return totalBorrowAmountWithInterests total borrow amount with interest\\n    function totalBorrowAmountWithInterest(uint256 _totalBorrowAmount, uint256 _rcomp)\\n        internal\\n        pure\\n        returns (uint256 totalBorrowAmountWithInterests)\\n    {\\n        totalBorrowAmountWithInterests = _totalBorrowAmount + _totalBorrowAmount * _rcomp / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates protocol liquidation fee and new protocol total fees collected\\n    /// @param _protocolEarnedFees amount of total collected fees so far\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _liquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\\n    /// @return liquidationFeeAmount calculated interest\\n    /// @return newProtocolEarnedFees `_currentInterest` + calculated fees\\n    function calculateLiquidationFee(uint256 _protocolEarnedFees, uint256 _amount, uint256 _liquidationFee)\\n        internal\\n        pure\\n        returns (uint256 liquidationFeeAmount, uint256 newProtocolEarnedFees)\\n    {\\n        unchecked {\\n            // if we overflow on multiplication it should not revert tx, we will get lower fees\\n            liquidationFeeAmount = _amount * _liquidationFee / Solvency._PRECISION_DECIMALS;\\n\\n            if (_protocolEarnedFees > type(uint256).max - liquidationFeeAmount) {\\n                newProtocolEarnedFees = type(uint256).max;\\n            } else {\\n                newProtocolEarnedFees = _protocolEarnedFees + liquidationFeeAmount;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates theoretical value (in ETH) that user could borrow based given collateral value\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _asset address of collateral token\\n    /// @param _type type of LTV limit to use for calcualtions\\n    /// @param _collateralValue value of collateral deposit (in ETH)\\n    /// @return availableToBorrow value (in ETH) that user can borrow against collateral value\\n    function _getAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address _asset,\\n        TypeofLTV _type,\\n        uint256 _collateralValue\\n    ) private view returns (uint256 availableToBorrow) {\\n        uint256 assetLTV;\\n\\n        if (_type == TypeofLTV.MaximumLTV) {\\n            assetLTV = _siloRepository.getMaximumLTV(_silo, _asset);\\n        } else if (_type == TypeofLTV.LiquidationThreshold) {\\n            assetLTV = _siloRepository.getLiquidationThreshold(_silo, _asset);\\n        } else {\\n            revert(\\\"UnsupportedLTVType()\\\");\\n        }\\n\\n        // value that can be borrowed against the deposit\\n        // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\\n        availableToBorrow = _collateralValue * assetLTV / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates theoretical value (in ETH) that user can borrow based on deposited collateral\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _assets array with assets\\n    /// @param _ltvType type of LTV limit to use for calculations\\n    /// acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @param _collateralValues value (worth in ETH) of each deposit (in ETH) made by user\\n    /// @return totalAvailableToBorrowValue value (in ETH) that user can borrow against collaterals\\n    function _getTotalAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address[] memory _assets,\\n        TypeofLTV _ltvType,\\n        uint256[] memory _collateralValues\\n    ) private view returns (uint256 totalAvailableToBorrowValue) {\\n        if (_assets.length != _collateralValues.length) revert IncorrectDataLength();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            totalAvailableToBorrowValue += _getAvailableToBorrowValue(\\n                _siloRepository,\\n                _silo,\\n                _assets[i],\\n                _ltvType,\\n                _collateralValues[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3f7942bb37788f3f87a5cf65e4849ab5f67cb3b3479f9db1150b4df35cb4ab0\",\"license\":\"BUSL-1.1\"},\"contracts/lib/TokenSymbol.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nlibrary TokenSymbol {\\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        // 0x95d89b41 => bytes4(keccak256(\\\"symbol()\\\"))\\n        (bool success, bytes memory data) = _token.staticcall(abi.encode(bytes4(0x95d89b41)));\\n\\n        assetSymbol = success\\n            ? data.length == 32 ? string(removeZeros(abi.encodePacked(data))) : abi.decode(data, (string))\\n            : \\\"\\\";\\n    }\\n\\n    function removeZeros(bytes memory _data) internal pure returns (bytes memory assetSymbol) {\\n        uint256 n = _data.length;\\n\\n        unchecked {\\n            for (uint256 i; i < n; i++) {\\n                if (_data[i] == 0) return assetSymbol;\\n\\n                assetSymbol = abi.encodePacked(assetSymbol, _data[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe34e96a77497267c9d27b66113b3f577096dd167f845c894fe305a261578f655\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f96806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063130a1df91461003b5780635a0c4de41461006b575b600080fd5b61004e610049366004610167565b61007a565b6040516001600160a01b0390911681526020015b60405180910390f35b60405160018152602001610062565b6000323314156100d05760405162461bcd60e51b815260206004820152601a60248201527f53696c6f466163746f72793a206e6f20706f6c6c7574696f6e21000000000000604482015260640160405180910390fd5b33836040516100de9061015a565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610111573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167fc9acd774c7fdaab3cff18a2b74905d6ffa85f25e7723ed9363b9c532c78bc4d360405160405180910390a392915050565b615d138061024e83390190565b6000806040838503121561017a57600080fd5b82356001600160a01b038116811461019157600080fd5b9150602083013567ffffffffffffffff808211156101ae57600080fd5b818501915085601f8301126101c257600080fd5b8135818111156101d4576101d4610237565b604051601f8201601f19908116603f011681019083821181831017156101fc576101fc610237565b8160405282815288602084870101111561021557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfe60e06040523480156200001157600080fd5b5060405162005d1338038062005d13833981016040819052620000349162000305565b818160016000819055506200005c8263e99ed41d60e01b6200014260201b6200126e1760201c565b620000ae5760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964205f7265706f7369746f72790000000000000000000000000060448201526064015b60405180910390fd5b6000620000c6826200021560201b620013361760201c565b9050806200010c5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590817dcda5b1bd05cdcd95d60721b6044820152606401620000a5565b6001600160601b0319606084811b821660a05283901b1660c0526200013381600a62000409565b60805250620004db9350505050565b60006001600160a01b0383166200015c575060006200020f565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b03871691620001a49162000382565b600060405180830381855afa9150503d8060008114620001e1576040519150601f19603f3d011682016040523d82523d6000602084013e620001e6565b606091505b50915091508180156200020a5750808060200190518101906200020a91906200033d565b925050505b92915050565b60006001600160a01b0382166200022e57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691620002739162000382565b600060405180830381855afa9150503d8060008114620002b0576040519150601f19603f3d011682016040523d82523d6000602084013e620002b5565b606091505b509150915081620002ca575060009392505050565b80806020019051810190620002e0919062000368565b949350505050565b80516001600160a01b03811681146200030057600080fd5b919050565b600080604083850312156200031957600080fd5b6200032483620002e8565b91506200033460208401620002e8565b90509250929050565b6000602082840312156200035057600080fd5b815180151581146200036157600080fd5b9392505050565b6000602082840312156200037b57600080fd5b5051919050565b6000825160005b81811015620003a5576020818601810151858301520162000389565b81811115620003b5576000828501525b509190910192915050565b600181815b8085111562000401578160001904821115620003e557620003e5620004c5565b80851615620003f357918102915b93841c9390800290620003c5565b509250929050565b600062000361838360008262000422575060016200020f565b8162000431575060006200020f565b81600181146200044a5760028114620004555762000475565b60019150506200020f565b60ff841115620004695762000469620004c5565b50506001821b6200020f565b5060208310610133831016604e8410600b84101617156200049a575081810a6200020f565b620004a68383620003c0565b8060001904821115620004bd57620004bd620004c5565b029392505050565b634e487b7160e01b600052601160045260246000fd5b60805160a05160601c60c05160601c6157766200059d600039600081816102da01528181610ad3015281816128f701528181612935015261385a015260008181610411015281816105dd01528181610a3001528181610c8c01528181610ddc01528181610eb6015281816111a201528181611ca701528181611d5e015281816120670152818161231d015281816124a40152818161285e0152818161295f015281816134690152818161353801526136490152600061043801526157766000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a388991b116100f9578063ead5d35911610097578063f87c3aa811610071578063f87c3aa8146104d4578063fb25570314610512578063fbf178db14610532578063ffa1ad741461054557600080fd5b8063ead5d3591461049b578063f364181c146104ae578063f3d470c2146104c157600080fd5b8063bde12718116100d3578063bde127181461040c578063be8be47d14610433578063bf27304114610468578063dbc5b4811461048857600080fd5b8063a388991b146103de578063a6e08aa1146103e6578063a7400918146103f957600080fd5b806364654cf5116101665780639198e515116101405780639198e5151461038e57806393a94ca3146103a1578063976ce495146103c3578063a1dfa423146103d657600080fd5b806364654cf51461030f57806367e4ac2c146103255780636ce5437d1461033a57600080fd5b80633edd1128116101a25780633edd11281461029757806340839cb1146102aa5780634521c019146102d55780634b8a3529146102fc57600080fd5b806322867d78146101c957806331e658a5146101de57806338b51ce114610274575b600080fd5b6101dc6101d7366004614d24565b61054d565b005b6102316101ec366004614b64565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b03938416958416949390921692909186565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c0015b60405180910390f35b610287610282366004614b64565b61055e565b604051901515815260200161026b565b6101dc6102a5366004614d50565b610645565b6102bd6102b8366004614ff8565b610652565b6040516001600160a01b03909116815260200161026b565b6102bd7f000000000000000000000000000000000000000000000000000000000000000081565b6101dc61030a366004614d24565b61067c565b61031761068c565b60405161026b929190615315565b61032d61080c565b60405161026b91906152c9565b61037e610348366004614b64565b6003602052600090815260409020805460018201546002909201549091906001600160401b03811690600160401b900460ff1684565b60405161026b949392919061546f565b6101dc61039c366004614b64565b61086e565b6103b46103af366004614ea6565b61087b565b60405161026b939291906152dc565b6101dc6103d1366004614c90565b6109af565b6101dc610a22565b6101dc610a2c565b6102876103f4366004614b9e565b610ba8565b6101dc610407366004614d92565b610c88565b6102bd7f000000000000000000000000000000000000000000000000000000000000000081565b61045a7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161026b565b61047b610476366004614b64565b610d6a565b60405161026b9190615461565b6101dc610496366004614bd7565b610dda565b6101dc6104a9366004614d50565b610ea7565b6101dc6104bc366004614c28565b610eb4565b6102876104cf366004614b9e565b610f8a565b6104e76104e2366004614b64565b611070565b604080518251815260208084015190820152918101516001600160401b03169082015260600161026b565b610525610520366004614b64565b6110f0565b60405161026b919061541f565b6101dc610540366004614cd1565b6111a0565b61045a600081565b61055982333384611401565b505050565b60006001600160a01b0382166105bb5760405162461bcd60e51b815260206004820152601c60248201527f4261736553696c6f3a207573657220213d20616464726573732830290000000060448201526064015b60405180910390fd5b6000806105c661068c565b915091506000806106396040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001886001600160a01b03168152506001611732565b10159695505050505050565b61055983333385856118a8565b6001818154811061066257600080fd5b6000918252602090912001546001600160a01b0316905081565b61068882333384611f6e565b5050565b60608060018054806020026020016040519081016040528092919081815260200182805480156106e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c7575b5050505050915081516001600160401b0381111561070557610705615707565b60405190808252806020026020018201604052801561073e57816020015b61072b614abd565b8152602001906001900390816107235790505b50905060005b82518110156108075760026000848381518110610763576107636156f1565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020825160c0810184528154851681526001820154851692810192909252600281015490931691810191909152600382015460608201526004820154608082015260059091015460a082015282518390839081106107e9576107e96156f1565b602002602001018190525080806107ff906156aa565b915050610744565b509091565b6060600180548060200260200160405190810160405280929190818152602001828054801561086457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610846575b5050505050905090565b61087881426122f8565b50565b606080606061088861080c565b8551909350806001600160401b038111156108a5576108a5615707565b6040519080825280602002602001820160405280156108d857816020015b60608152602001906001900390816108c35790505b509250806001600160401b038111156108f3576108f3615707565b60405190808252806020026020018201604052801561092657816020015b60608152602001906001900390816109115790505b50915060005b818110156109a6576109598588838151811061094a5761094a6156f1565b602002602001015133896125f3565b85838151811061096b5761096b6156f1565b60200260200101858481518110610984576109846156f1565b602002602001018290528290525050808061099e906156aa565b91505061092c565b50509250925092565b6109b88261055e565b15610a105760405162461bcd60e51b815260206004820152602260248201527f53696c6f2e7265706179466f723a20626f72726f77657220697320736f6c76656044820152611b9d60f21b60648201526084016105b2565b610a1c83833384611401565b50505050565b610a2a61285a565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac39190810190614e06565b905060005b8151811015610b9f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610b0d57610b0d6156f1565b60200260200101516001600160a01b031614610b8d57600260036000848481518110610b3b57610b3b6156f1565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060020160086101000a81548160ff02191690836002811115610b8757610b876156db565b02179055505b80610b97816156aa565b915050610ac8565b5061087861285a565b6001600160a01b0382811660009081526002602081905260408083209091015490516370a0823160e01b81528484166004820152919216906370a08231906024015b60206040518083038186803b158015610c0257600080fd5b505afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190615011565b158015610c7f575060015b6001600160a01b0384166000908152600360205260409020600290810154600160401b900460ff1690811115610c7d57610c7d6156db565b145b90505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce357600080fd5b505afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190614b81565b905060005b82811015610a1c57610d58848483818110610d3d57610d3d6156f1565b9050602002016020810190610d529190614b64565b83612a86565b80610d62816156aa565b915050610d20565b610d72614abd565b506001600160a01b03908116600090815260026020818152604092839020835160c0810185528154861681526001820154861692810192909252918201549093169183019190915260038101546060830152600481015460808301526005015460a082015290565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190614b81565b6001600160a01b0316336001600160a01b031614610e9b5760405162461bcd60e51b81526004016105b2906153ba565b610a1c84848484611f6e565b610a1c8333338585612adf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190614b81565b6001600160a01b0316336001600160a01b031614610f755760405162461bcd60e51b81526004016105b2906153ba565b610f828585858585612adf565b505050505050565b6001600160a01b038281166000908152600260205260408082205490516370a0823160e01b81528484166004820152919216906370a082319060240160206040518083038186803b158015610fde57600080fd5b505afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110169190615011565b15801561106257506001600160a01b03838116600090815260026020526040908190206001015490516370a0823160e01b815284831660048201529116906370a0823190602401610bea565b8015610c7f57506001610c45565b61109d6040518060600160405280600081526020016000815260200160006001600160401b031681525090565b50604080516060810182526001600160a01b039092166000818152600260208181528483206003808201548852600590910154828801529383529290925282902001546001600160401b03169082015290565b6111186040805160808101825260008082526020820181905291810182905290606082015290565b6001600160a01b0382166000908152600360209081526040918290208251608081018452815481526001820154928101929092526002808201546001600160401b03811694840194909452919290916060840191600160401b900460ff1690811115611186576111866156db565b6002811115611197576111976156db565b90525092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190614b81565b6001600160a01b0316336001600160a01b0316146112615760405162461bcd60e51b81526004016105b2906153ba565b610a1c84338585856118a8565b60006001600160a01b03831661128657506000610c82565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b038716916112cc916151ae565b600060405180830381855afa9150503d8060008114611307576040519150601f19603f3d011682016040523d82523d6000602084013e61130c565b606091505b509150915081801561132d57508080602001905181019061132d9190614f6e565b95945050505050565b60006001600160a01b03821661134e57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691611391916151ae565b600060405180830381855afa9150503d80600081146113cc576040519150601f19603f3d011682016040523d82523d6000602084013e6113d1565b606091505b5091509150816113e5575060009392505050565b808060200190518101906113f99190615011565b949350505050565b600084816001600160a01b0382166000908152600360205260409020600290810154600160401b900460ff169081111561143d5761143d6156db565b141561148b5760405162461bcd60e51b815260206004820152601e60248201527f4261736553696c6f3a20617373657420646f6573206e6f74206578697374000060448201526064016105b2565b61149586426122f8565b6001600160a01b0386166000908152600260205260408120906114b9828887612d0b565b9095509050806114ce57600093505050611729565b866001600160a01b0316886001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac46848760405161151391815260200190565b60405180910390a36040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a082319060240160206040518083038186803b15801561155d57600080fd5b505afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190615011565b90506115ac6001600160a01b038a16883089612e85565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a082319060240160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190615011565b9050866116338383615667565b10156116a05760405162461bcd60e51b815260206004820152603660248201527f53696c6f3a207472616e7366657272656420616d6f756e74206973206c6f77656044820152751c881d1a185d081c995c5d5a5c995908185b5bdd5b9d60521b60648201526084016105b2565b6002840154604051632770a7eb60e21b81526001600160a01b038b811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050508684600501600082825461171c9190615667565b9091555087965050505050505b50949350505050565b600080600061174085612ef0565b905061174b8161300c565b61175c5760008092509250506118a1565b600085600001516001600160a01b0316635ddf2be36040518163ffffffff1660e01b815260040160206040518083038186803b15801561179b57600080fd5b505afa1580156117af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d39190614b81565b905060006117e682886040015185613052565b905060006117f38261300c565b90508061180a5760008095509550505050506118a1565b6000611816848a613290565b905060006118238261300c565b90508061183e576000196000975097505050505050506118a1565b60006118598b600001518c602001518d604001518d876132ae565b90508161186e670de0b6b3a764000086615648565b611878919061552b565b98508161188d670de0b6b3a764000083615648565b611897919061552b565b9750505050505050505b9250929050565b600260005414156118cb5760405162461bcd60e51b81526004016105b2906153e8565b6002600055846118db81426122f8565b6118e58685610ba8565b6119285760405162461bcd60e51b81526020600482015260146024820152734465706f7369744e6f74506f737369626c65282960601b60448201526064016105b2565b6001600160a01b03861660008181526002602052604080822090516370a0823160e01b81523060048201529092906370a082319060240160206040518083038186803b15801561197757600080fd5b505afa15801561198b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119af9190615011565b90506119c66001600160a01b038916883088612e85565b6040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a082319060240160206040518083038186803b158015611a0857600080fd5b505afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190615011565b9050611a4c8282615667565b9550600085611a5f578360030154611a65565b83600401545b90508515611b87576000611b03828660010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb9190615011565b8a9190613345565b9050611b0f8883615513565b60048681019190915560018601546040516340c10f1960e01b81526001600160a01b038c811693820193909352602481018490529116906340c10f1990604401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b5050505050611c55565b6000611bdd828660000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac357600080fd5b9050611be98883615513565b600386015584546040516340c10f1960e01b81526001600160a01b038b8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015611c3b57600080fd5b505af1158015611c4f573d6000803e3d6000fd5b50505050505b6040805188815287151560208201526001600160a01b03808b1692908d16917fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb5910160405180910390a35050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ddf2be36040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190614b81565b604051635b26eec960e11b81523060048201526001600160a01b0384811660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b64ddd929060440160206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190615011565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1357600080fd5b505afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b919061502a565b611e5690600a61559c565b6001600160a01b03848116600081815260026020526040908190206003015490516341976e0960e01b81526004810192909252918516906341976e099060240160206040518083038186803b158015611eae57600080fd5b505afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190615011565b611ef09190615648565b611efa919061552b565b1115611f605760405162461bcd60e51b815260206004820152602f60248201527f4261736553696c6f3a20746f74616c206465706f73697473206578636565642060448201526e1b1a5c5d5a591a5d1e481b1a5b5a5d608a1b60648201526084016105b2565b505060016000555050505050565b60026000541415611f915760405162461bcd60e51b81526004016105b2906153e8565b6002600055611fa08484610f8a565b611fe05760405162461bcd60e51b8152602060048201526011602482015270426f72726f774e6f74506f737369626c6560781b60448201526064016105b2565b80611fea8561337d565b10156120385760405162461bcd60e51b815260206004820152601a60248201527f4261736553696c6f3a206465706f7369742073686f727461676500000000000060448201526064016105b2565b6001600160a01b038416600090815260026020526040902061205a85426122f8565b60008160050154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190615011565b90506000811561212257670de0b6b3a76400006121138387615648565b61211d919061552b565b612125565b60005b905060006121c6848660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b59190615011565b6121bf858a615513565b9190613345565b60028601546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561221857600080fd5b505af115801561222c573d6000803e3d6000fd5b5050505081868561223d9190615513565b6122479190615513565b60058601556001600160a01b03891660009081526003602052604081206001018054849290612277908490615513565b92505081905550876001600160a01b0316896001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b52886040516122c391815260200190565b60405180910390a36122df6001600160a01b038a168888613417565b6122e888613447565b5050600160005550505050505050565b6040516344cf3e9360e01b81523060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906344cf3e939060440160206040518083038186803b15801561235f57600080fd5b505afa158015612373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123979190614f6e565b156123d35760405162461bcd60e51b815260206004820152600c60248201526b14da5b1bce881c185d5cd95960a21b60448201526064016105b2565b6001600160a01b03821660009081526002602081815260408084206003909252909220908101546001600160401b03168314156124105750505050565b600061241b85613510565b60405162f704bf60e21b81526001600160a01b0387811660048301526024820187905291909116906303dc12fc90604401602060405180830381600087803b15801561246657600080fd5b505af115801561247a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249e9190615011565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fb57600080fd5b505afa15801561250f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125339190615011565b60058501549091506000670de0b6b3a76400006125508584615648565b61255a919061552b565b90506000670de0b6b3a76400006125718584615648565b61257b919061552b565b905060006125898284615667565b90506125958385615513565b600589015560038801546125aa908290615513565b600389015560018701546125bf908390615513565b60018801555050506002909301805467ffffffffffffffff19166001600160401b0396909616959095179094555050505050565b606080600260005414156126195760405162461bcd60e51b81526004016105b2906153e8565b60026000556126278561055e565b1561267d57600086516001600160401b0381111561264757612647615707565b604051908082528060200260200182016040528015612670578160200160208202803683370190505b50925082915061284a9050565b6126888686866135b4565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da5906126c19088908a90879087908a9060040161526b565b600060405180830381600087803b1580156126db57600080fd5b505af11580156126ef573d6000803e3d6000fd5b5050505060005b86518110156127fb57828181518110612711576127116156f1565b602002602001015160001415806127425750818181518110612735576127356156f1565b6020026020010151600014155b156127e957856001600160a01b0316878281518110612763576127636156f1565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef9728484815181106127a7576127a76156f1565b60200260200101518685815181106127c1576127c16156f1565b60200260200101516040516127e0929190918252602082015260400190565b60405180910390a35b806127f3816156aa565b9150506126f6565b506128058561055e565b61284a5760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b60448201526064016105b2565b6001600055909590945092505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190614b81565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600260205260409020549192501661295b5761295b817f0000000000000000000000000000000000000000000000000000000000000000600061383a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b1580156129b657600080fd5b505afa1580156129ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f29190810190614e06565b905060005b81518110156105595760006001600160a01b031660026000848481518110612a2157612a216156f1565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054161415612a7457612a7483838381518110612a6557612a656156f1565b6020026020010151600161383a565b80612a7e816156aa565b9150506129f7565b6001600160a01b03821660009081526003602052604081206001810154815491929091612ab39083615667565b905080612ac1575050505050565b818355612ad86001600160a01b0386168583613417565b5050505050565b600060026000541415612b045760405162461bcd60e51b81526004016105b2906153e8565b6002600090815586906001600160a01b0382166000908152600360205260409020600290810154600160401b900460ff1690811115612b4557612b456156db565b1415612b935760405162461bcd60e51b815260206004820152601e60248201527f4261736553696c6f3a20617373657420646f6573206e6f74206578697374000060448201526064016105b2565b612b9d87426122f8565b6001600160a01b0387166000908152600260205260408120908415612bfb5760048201546001830154612be2908b9083908a906001600160a01b03168d8d6000613c83565b97509150612bf08782615667565b600484015550612c33565b60038201548254612c1e908b9083908a906001600160a01b03168d8d6000613c83565b97509150612c2c8782615667565b6003840155505b612c3c8861055e565b612c975760405162461bcd60e51b815260206004820152602660248201527f4261736553696c6f3a206e6f7420736f6c76656e7420696e2073696c6f20706f60448201526539b4ba34b7b760d11b60648201526084016105b2565b866001600160a01b0316886001600160a01b03168a6001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f02838989604051612cf19291909182521515602082015260400190565b60405180910390a450506001600055509195945050505050565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a082319060240160206040518083038186803b158015612d5957600080fd5b505afa158015612d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d919190615011565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612de557600080fd5b505afa158015612df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1d9190615011565b6005880154909150600019861415612e46579192508291612e3f838284613eba565b9450612e7a565b6000612e53848385613eba565b9050808711612e7157612e67878385613345565b9450869550612e78565b8394508095505b505b505050935093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a1c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613edf565b606081606001515182604001515114612f1c5760405163779ab6bd60e11b815260040160405180910390fd5b8160400151516001600160401b03811115612f3957612f39615707565b604051908082528060200260200182016040528015612f62578160200160208202803683370190505b50905060005b826040015151811015613006576000612fa88460200151856000015186604001518581518110612f9a57612f9a6156f1565b602002602001015142613fb1565b9050612fd684606001518381518110612fc357612fc36156f1565b60200260200101518560800151836140cd565b838381518110612fe857612fe86156f1565b60209081029190910101525080612ffe816156aa565b915050612f68565b50919050565b6000805b82518110156130065782818151811061302b5761302b6156f1565b60200260200101518261303e9190615513565b91508061304a816156aa565b915050613010565b606081518351146130765760405163779ab6bd60e11b815260040160405180910390fd5b82516001600160401b0381111561308f5761308f615707565b6040519080825280602002602001820160405280156130b8578160200160208202803683370190505b50905060005b8351811015613288578281815181106130d9576130d96156f1565b6020026020010151600014156130ee57613276565b6000856001600160a01b03166341976e09868481518110613111576131116156f1565b60200260200101516040518263ffffffff1660e01b815260040161314491906001600160a01b0391909116815260200190565b60206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131949190615011565b905060008583815181106131aa576131aa6156f1565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ea57600080fd5b505afa1580156131fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613222919061502a565b9050613255828260ff1687868151811061323e5761323e6156f1565b60200260200101516141b49092919063ffffffff16565b848481518110613267576132676156f1565b60200260200101818152505050505b80613280816156aa565b9150506130be565b509392505050565b6060600061329d836141cb565b90506113f984846040015183613052565b600081518451146132d25760405163779ab6bd60e11b815260040160405180910390fd5b60005b845181101561333b5761331d87878784815181106132f5576132f56156f1565b602002602001015187878681518110613310576133106156f1565b602002602001015161440e565b6133279083615513565b915080613333816156aa565b9150506132d5565b5095945050505050565b6000811580613352575082155b1561335e575082613376565b826133698386615648565b613373919061552b565b90505b9392505050565b6001600160a01b03811660008181526002602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a082319060240160206040518083038186803b1580156133d557600080fd5b505afa1580156133e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340d9190615011565b610c829190615667565b6040516001600160a01b03831660248201526044810182905261055990849063a9059cbb60e01b90606401612eb9565b60008061345261068c565b915091506000806134c56040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001876001600160a01b03168152506000611732565b9150915080821115612ad85760405162461bcd60e51b81526020600482015260146024820152732130b9b2a9b4b6379d1036b0bc34b6bab6a62a2b60611b60448201526064016105b2565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc9060440160206040518083038186803b15801561357c57600080fd5b505afa158015613590573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190614b81565b825160609081904290806001600160401b038111156135d5576135d5615707565b6040519080825280602002602001820160405280156135fe578160200160208202803683370190505b509350806001600160401b0381111561361957613619615707565b604051908082528060200260200182016040528015613642578160200160208202803683370190505b50925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafecffa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a057600080fd5b505afa1580156136b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d89190615011565b905060005b82811015612e78576000600260008b84815181106136fd576136fd6156f1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905061374a8a838151811061373c5761373c6156f1565b6020026020010151866122f8565b613757818a600019612d0b565b5086838151811061376a5761376a6156f1565b60200260200101818152505060006137b78b848151811061378d5761378d6156f1565b602090810291909101015160048401546001850154600019906001600160a01b03168e8e8a613c83565b91505060006137f88c85815181106137d1576137d16156f1565b602090810291909101015160038501548554600019906001600160a01b03168f8f8b613c83565b915061380690508183615513565b898581518110613818576138186156f1565b6020026020010181815250505050508080613832906156aa565b9150506136dd565b60608060006138488561456a565b90508315613945576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600260205260408082205481516395d89b4160e01b81529151929316916395d89b41916004808201928692909190829003018186803b1580156138c257600080fd5b505afa1580156138d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138fe9190810190614f8b565b905080604051806040016040528060018152602001602d60f81b8152508360405160200161392e93929190615228565b60405160208183030381529060405293505061398c565b60006040518060400160405280600481526020016353696c6f60e01b815250905080826040516020016139799291906151f9565b6040516020818303038152906040529350505b6000836040518060400160405280601081526020016f2d636f6c6c61746572616c2d4f4e4c5960801b8152506040516020016139c99291906151f9565b60408051601f1981840301815282820182526005835264446562742d60d81b6020848101919091529151909350613a0392918791016151f9565b60408051601f198184030181529082905263f8f38d1b60e01b825293506001600160a01b0388169063f8f38d1b90613a4390879081908b9060040161537c565b602060405180830381600087803b158015613a5d57600080fd5b505af1158015613a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a959190614b81565b6001600160a01b038781166000908152600260205260409081902080546001600160a01b03191693831693909317909255905163f8f38d1b60e01b81529088169063f8f38d1b90613aee90849081908b9060040161537c565b602060405180830381600087803b158015613b0857600080fd5b505af1158015613b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b409190614b81565b6001600160a01b038781166000908152600260205260409081902060010180546001600160a01b031916938316939093179092559051633b0eb45d60e21b81529088169063ec3ad17490613b9c90869081908b9060040161537c565b602060405180830381600087803b158015613bb657600080fd5b505af1158015613bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bee9190614b81565b6001600160a01b0396871660008181526002602081815260408084208301805496909c166001600160a01b031996871617909b55600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516909317909355600390915296909620909501805468ff00000000000000001916600160401b179055505050505050565b600080600019871415613d8f576040516370a0823160e01b81526001600160a01b0386811660048301528716906370a082319060240160206040518083038186803b158015613cd157600080fd5b505afa158015613ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d099190615011565b9150613d8888876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4857600080fd5b505afa158015613d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d809190615011565b849190613eba565b9050613e12565b613e0c88876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613dcc57600080fd5b505afa158015613de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e049190615011565b899190613345565b91508690505b80613e2257506000905080613eae565b604051632770a7eb60e21b81526001600160a01b03868116600483015260248201849052871690639dc29fac90604401600060405180830381600087803b158015613e6c57600080fd5b505af1158015613e80573d6000803e3d6000fd5b5050505082600014613e9a57613e97898285614652565b90505b613eae6001600160a01b038a168583613417565b97509795505050505050565b6000811580613ec7575082155b15613ed457506000613376565b816133698486615648565b6000613f34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146a29092919063ffffffff16565b8051909150156105595780806020019051810190613f529190614f6e565b6105595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b2565b60405163122cfaaf60e21b81526001600160a01b038581166004830152838116602483015260009182918616906348b3eabc9060440160206040518083038186803b158015613fff57600080fd5b505afa158015614013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140379190614b81565b60405163b1e0176560e01b81526001600160a01b0388811660048301528681166024830152604482018690529192509082169063b1e017659060640160206040518083038186803b15801561408b57600080fd5b505afa15801561409f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c39190615011565b9695505050505050565b60408084015190516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a082319060240160206040518083038186803b15801561411857600080fd5b505afa15801561412c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141509190615011565b905080614161576000915050613376565b60006141718660a00151856146b1565b90506140c38187604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4857600080fd5b60006141c182600a615590565b6133698486615648565b60608160400151516001600160401b038111156141ea576141ea615707565b604051908082528060200260200182016040528015614213578160200160208202803683370190505b50905060005b8260400151518110156130065760008360600151828151811061423e5761423e6156f1565b60209081029190910101515160808501516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561429057600080fd5b505afa1580156142a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c89190615011565b90506000846060015183815181106142e2576142e26156f1565b602090810291909101810151015160808601516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561433657600080fd5b505afa15801561434a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436e9190615011565b905061437a8183615513565b6143855750506143fc565b60006143aa8660200151876000015188604001518781518110612f9a57612f9a6156f1565b90506143da866060015185815181106143c5576143c56156f1565b60200260200101518484848a600001516146da565b8585815181106143ec576143ec6156f1565b6020026020010181815250505050505b80614406816156aa565b915050614219565b60008080846001811115614424576144246156db565b14156144b3576040516330be9d2560e21b81526001600160a01b038781166004830152868116602483015288169063c2fa7494906044015b60206040518083038186803b15801561447457600080fd5b505afa158015614488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ac9190615011565b9050614542565b60018460018111156144c7576144c76156db565b141561450357604051630ca4db1160e21b81526001600160a01b03878116600483015286811660248301528816906332936c449060440161445c565b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465644c545654797065282960601b60448201526064016105b2565b670de0b6b3a76400006145558285615648565b61455f919061552b565b979650505050505050565b604080516395d89b4160e01b602082015260609160009182916001600160a01b038616910160408051601f19818403018152908290526145a9916151ae565b600060405180830381855afa9150503d80600081146145e4576040519150601f19603f3d011682016040523d82523d6000602084013e6145e9565b606091505b50915091508161460857604051806020016040528060008152506113f9565b805160201461462a57808060200190518101906146259190614f8b565b6113f9565b6113f98160405160200161463e91906151ae565b604051602081830303815290604052614859565b6001600160a01b038316600090815260036020526040812060010154819061467b9085856148e5565b6001600160a01b039096166000908152600360205260409020600101959095555050500390565b60606133738484600085614913565b6000670de0b6b3a76400006146c68385615648565b6146d0919061552b565b610c7f9084615513565b60008085156147e7576147e26147658860600151856001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561472757600080fd5b505afa15801561473b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061475f9190615011565b87614a30565b88600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156147a257600080fd5b505afa1580156147b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147da9190615011565b889190613eba565b6147ea565b60005b90506000851561483e57614839886080015189602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156147a257600080fd5b614841565b60005b905061484d8183615513565b98975050505050505050565b805160609060005b818110156148de5783818151811061487b5761487b6156f1565b01602001516001600160f81b031916614895575050919050565b828482815181106148a8576148a86156f1565b602001015160f81c60f81b6040516020016148c49291906151ca565b60408051601f198184030181529190529250600101614861565b5050919050565b670de0b6b3a76400008183020460008119851115614906575060001961490b565b508381015b935093915050565b6060824710156149745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105b2565b843b6149c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b2565b600080866001600160a01b031685876040516149de91906151ae565b60006040518083038185875af1925050503d8060008114614a1b576040519150601f19603f3d011682016040523d82523d6000602084013e614a20565b606091505b509150915061455f828286614a84565b600080614a4584670de0b6b3a7640000615667565b9050670de0b6b3a76400008082614a5c8689615648565b614a669190615648565b614a70919061552b565b614a7a919061552b565b61132d9086615513565b60608315614a93575081613376565b825115614aa35782518084602001fd5b8160405162461bcd60e51b81526004016105b29190615369565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600082601f830112614b1f57600080fd5b8135614b32614b2d826154ec565b615499565b818152846020838601011115614b4757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215614b7657600080fd5b81356133768161571d565b600060208284031215614b9357600080fd5b81516133768161571d565b60008060408385031215614bb157600080fd5b8235614bbc8161571d565b91506020830135614bcc8161571d565b809150509250929050565b60008060008060808587031215614bed57600080fd5b8435614bf88161571d565b93506020850135614c088161571d565b92506040850135614c188161571d565b9396929550929360600135925050565b600080600080600060a08688031215614c4057600080fd5b8535614c4b8161571d565b94506020860135614c5b8161571d565b93506040860135614c6b8161571d565b9250606086013591506080860135614c8281615732565b809150509295509295909350565b600080600060608486031215614ca557600080fd5b8335614cb08161571d565b92506020840135614cc08161571d565b929592945050506040919091013590565b60008060008060808587031215614ce757600080fd5b8435614cf28161571d565b93506020850135614d028161571d565b9250604085013591506060850135614d1981615732565b939692955090935050565b60008060408385031215614d3757600080fd5b8235614d428161571d565b946020939093013593505050565b600080600060608486031215614d6557600080fd5b8335614d708161571d565b9250602084013591506040840135614d8781615732565b809150509250925092565b60008060208385031215614da557600080fd5b82356001600160401b0380821115614dbc57600080fd5b818501915085601f830112614dd057600080fd5b813581811115614ddf57600080fd5b8660208260051b8501011115614df457600080fd5b60209290920196919550909350505050565b60006020808385031215614e1957600080fd5b82516001600160401b03811115614e2f57600080fd5b8301601f81018513614e4057600080fd5b8051614e4e614b2d826154c9565b80828252848201915084840188868560051b8701011115614e6e57600080fd5b600094505b83851015614e9a578051614e868161571d565b835260019490940193918501918501614e73565b50979650505050505050565b60008060408385031215614eb957600080fd5b82356001600160401b0380821115614ed057600080fd5b818501915085601f830112614ee457600080fd5b81356020614ef4614b2d836154c9565b8083825282820191508286018a848660051b8901011115614f1457600080fd5b600096505b84871015614f40578035614f2c8161571d565b835260019690960195918301918301614f19565b5096505086013592505080821115614f5757600080fd5b50614f6485828601614b0e565b9150509250929050565b600060208284031215614f8057600080fd5b815161337681615732565b600060208284031215614f9d57600080fd5b81516001600160401b03811115614fb357600080fd5b8201601f81018413614fc457600080fd5b8051614fd2614b2d826154ec565b818152856020838501011115614fe757600080fd5b61132d82602083016020860161567e565b60006020828403121561500a57600080fd5b5035919050565b60006020828403121561502357600080fd5b5051919050565b60006020828403121561503c57600080fd5b815160ff8116811461337657600080fd5b600081518084526020808501945080840160005b838110156150865781516001600160a01b031687529582019590820190600101615061565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b848110156150dc57601f198684030189526150ca8383516150e9565b988401989250908301906001016150ae565b5090979650505050505050565b600081518084526020808501945080840160005b83811015615086578151875295820195908201906001016150fd565b6000815180845261513181602086016020860161567e565b601f01601f19169290920160200192915050565b6003811061516357634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03908116835260208083015182169084015260408083015190911690830152606080820151908301526080808201519083015260a090810151910152565b600082516151c081846020870161567e565b9190910192915050565b600083516151dc81846020880161567e565b6001600160f81b0319939093169190920190815260010192915050565b6000835161520b81846020880161567e565b83519083019061521f81836020880161567e565b01949350505050565b6000845161523a81846020890161567e565b84519083019061524e81836020890161567e565b845191019061526181836020880161567e565b0195945050505050565b6001600160a01b038616815260a06020820181905260009061528f9083018761504d565b82810360408401526152a181876150e9565b905082810360608401526152b581866150e9565b9050828103608084015261484d8185615119565b602081526000610c7f602083018461504d565b6060815260006152ef606083018661504d565b82810360208401526153018186615091565b905082810360408401526140c38185615091565b604081526000615328604083018561504d565b82810360208481019190915284518083528582019282019060005b818110156150dc57615356838651615167565b9383019360c09290920191600101615343565b602081526000610c7f6020830184615119565b60608152600061538f6060830186615119565b82810360208401526153a18186615119565b91505060018060a01b0383166040830152949350505050565b6020808252601490820152732130b9b2a9b4b6379d1037b7363ca937baba32b960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060808201905082518252602083015160208301526001600160401b036040840151166040830152606083015161545a6060840182615145565b5092915050565b60c08101610c828284615167565b848152602081018490526001600160401b03831660408201526080810161132d6060830184615145565b604051601f8201601f191681016001600160401b03811182821017156154c1576154c1615707565b604052919050565b60006001600160401b038211156154e2576154e2615707565b5060051b60200190565b60006001600160401b0382111561550557615505615707565b50601f01601f191660200190565b60008219821115615526576155266156c5565b500190565b60008261554857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561558857816000190482111561556e5761556e6156c5565b8085161561557b57918102915b93841c9390800290615552565b509250929050565b6000610c7f83836155a7565b6000610c7f60ff8416835b6000826155b657506001610c82565b816155c357506000610c82565b81600181146155d957600281146155e3576155ff565b6001915050610c82565b60ff8411156155f4576155f46156c5565b50506001821b610c82565b5060208310610133831016604e8410600b8410161715615622575081810a610c82565b61562c838361554d565b8060001904821115615640576156406156c5565b029392505050565b6000816000190483118215151615615662576156626156c5565b500290565b600082821015615679576156796156c5565b500390565b60005b83811015615699578181015183820152602001615681565b83811115610a1c5750506000910152565b60006000198214156156be576156be6156c5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461087857600080fd5b801515811461087857600080fdfea26469706673582212201c1e56b480dd7d4427ad824c1ac714fdbe14d52afe3a0899ddc1a2c45503986564736f6c63430008070033a26469706673582212208cfd2cce6d2fd46aedde44cb19e938fbec7a79a3a7a899d3ab415b23e6bcb06164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063130a1df91461003b5780635a0c4de41461006b575b600080fd5b61004e610049366004610167565b61007a565b6040516001600160a01b0390911681526020015b60405180910390f35b60405160018152602001610062565b6000323314156100d05760405162461bcd60e51b815260206004820152601a60248201527f53696c6f466163746f72793a206e6f20706f6c6c7574696f6e21000000000000604482015260640160405180910390fd5b33836040516100de9061015a565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610111573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167fc9acd774c7fdaab3cff18a2b74905d6ffa85f25e7723ed9363b9c532c78bc4d360405160405180910390a392915050565b615d138061024e83390190565b6000806040838503121561017a57600080fd5b82356001600160a01b038116811461019157600080fd5b9150602083013567ffffffffffffffff808211156101ae57600080fd5b818501915085601f8301126101c257600080fd5b8135818111156101d4576101d4610237565b604051601f8201601f19908116603f011681019083821181831017156101fc576101fc610237565b8160405282815288602084870101111561021557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfe60e06040523480156200001157600080fd5b5060405162005d1338038062005d13833981016040819052620000349162000305565b818160016000819055506200005c8263e99ed41d60e01b6200014260201b6200126e1760201c565b620000ae5760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964205f7265706f7369746f72790000000000000000000000000060448201526064015b60405180910390fd5b6000620000c6826200021560201b620013361760201c565b9050806200010c5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590817dcda5b1bd05cdcd95d60721b6044820152606401620000a5565b6001600160601b0319606084811b821660a05283901b1660c0526200013381600a62000409565b60805250620004db9350505050565b60006001600160a01b0383166200015c575060006200020f565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b03871691620001a49162000382565b600060405180830381855afa9150503d8060008114620001e1576040519150601f19603f3d011682016040523d82523d6000602084013e620001e6565b606091505b50915091508180156200020a5750808060200190518101906200020a91906200033d565b925050505b92915050565b60006001600160a01b0382166200022e57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691620002739162000382565b600060405180830381855afa9150503d8060008114620002b0576040519150601f19603f3d011682016040523d82523d6000602084013e620002b5565b606091505b509150915081620002ca575060009392505050565b80806020019051810190620002e0919062000368565b949350505050565b80516001600160a01b03811681146200030057600080fd5b919050565b600080604083850312156200031957600080fd5b6200032483620002e8565b91506200033460208401620002e8565b90509250929050565b6000602082840312156200035057600080fd5b815180151581146200036157600080fd5b9392505050565b6000602082840312156200037b57600080fd5b5051919050565b6000825160005b81811015620003a5576020818601810151858301520162000389565b81811115620003b5576000828501525b509190910192915050565b600181815b8085111562000401578160001904821115620003e557620003e5620004c5565b80851615620003f357918102915b93841c9390800290620003c5565b509250929050565b600062000361838360008262000422575060016200020f565b8162000431575060006200020f565b81600181146200044a5760028114620004555762000475565b60019150506200020f565b60ff841115620004695762000469620004c5565b50506001821b6200020f565b5060208310610133831016604e8410600b84101617156200049a575081810a6200020f565b620004a68383620003c0565b8060001904821115620004bd57620004bd620004c5565b029392505050565b634e487b7160e01b600052601160045260246000fd5b60805160a05160601c60c05160601c6157766200059d600039600081816102da01528181610ad3015281816128f701528181612935015261385a015260008181610411015281816105dd01528181610a3001528181610c8c01528181610ddc01528181610eb6015281816111a201528181611ca701528181611d5e015281816120670152818161231d015281816124a40152818161285e0152818161295f015281816134690152818161353801526136490152600061043801526157766000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a388991b116100f9578063ead5d35911610097578063f87c3aa811610071578063f87c3aa8146104d4578063fb25570314610512578063fbf178db14610532578063ffa1ad741461054557600080fd5b8063ead5d3591461049b578063f364181c146104ae578063f3d470c2146104c157600080fd5b8063bde12718116100d3578063bde127181461040c578063be8be47d14610433578063bf27304114610468578063dbc5b4811461048857600080fd5b8063a388991b146103de578063a6e08aa1146103e6578063a7400918146103f957600080fd5b806364654cf5116101665780639198e515116101405780639198e5151461038e57806393a94ca3146103a1578063976ce495146103c3578063a1dfa423146103d657600080fd5b806364654cf51461030f57806367e4ac2c146103255780636ce5437d1461033a57600080fd5b80633edd1128116101a25780633edd11281461029757806340839cb1146102aa5780634521c019146102d55780634b8a3529146102fc57600080fd5b806322867d78146101c957806331e658a5146101de57806338b51ce114610274575b600080fd5b6101dc6101d7366004614d24565b61054d565b005b6102316101ec366004614b64565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b03938416958416949390921692909186565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c0015b60405180910390f35b610287610282366004614b64565b61055e565b604051901515815260200161026b565b6101dc6102a5366004614d50565b610645565b6102bd6102b8366004614ff8565b610652565b6040516001600160a01b03909116815260200161026b565b6102bd7f000000000000000000000000000000000000000000000000000000000000000081565b6101dc61030a366004614d24565b61067c565b61031761068c565b60405161026b929190615315565b61032d61080c565b60405161026b91906152c9565b61037e610348366004614b64565b6003602052600090815260409020805460018201546002909201549091906001600160401b03811690600160401b900460ff1684565b60405161026b949392919061546f565b6101dc61039c366004614b64565b61086e565b6103b46103af366004614ea6565b61087b565b60405161026b939291906152dc565b6101dc6103d1366004614c90565b6109af565b6101dc610a22565b6101dc610a2c565b6102876103f4366004614b9e565b610ba8565b6101dc610407366004614d92565b610c88565b6102bd7f000000000000000000000000000000000000000000000000000000000000000081565b61045a7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161026b565b61047b610476366004614b64565b610d6a565b60405161026b9190615461565b6101dc610496366004614bd7565b610dda565b6101dc6104a9366004614d50565b610ea7565b6101dc6104bc366004614c28565b610eb4565b6102876104cf366004614b9e565b610f8a565b6104e76104e2366004614b64565b611070565b604080518251815260208084015190820152918101516001600160401b03169082015260600161026b565b610525610520366004614b64565b6110f0565b60405161026b919061541f565b6101dc610540366004614cd1565b6111a0565b61045a600081565b61055982333384611401565b505050565b60006001600160a01b0382166105bb5760405162461bcd60e51b815260206004820152601c60248201527f4261736553696c6f3a207573657220213d20616464726573732830290000000060448201526064015b60405180910390fd5b6000806105c661068c565b915091506000806106396040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001886001600160a01b03168152506001611732565b10159695505050505050565b61055983333385856118a8565b6001818154811061066257600080fd5b6000918252602090912001546001600160a01b0316905081565b61068882333384611f6e565b5050565b60608060018054806020026020016040519081016040528092919081815260200182805480156106e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c7575b5050505050915081516001600160401b0381111561070557610705615707565b60405190808252806020026020018201604052801561073e57816020015b61072b614abd565b8152602001906001900390816107235790505b50905060005b82518110156108075760026000848381518110610763576107636156f1565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020825160c0810184528154851681526001820154851692810192909252600281015490931691810191909152600382015460608201526004820154608082015260059091015460a082015282518390839081106107e9576107e96156f1565b602002602001018190525080806107ff906156aa565b915050610744565b509091565b6060600180548060200260200160405190810160405280929190818152602001828054801561086457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610846575b5050505050905090565b61087881426122f8565b50565b606080606061088861080c565b8551909350806001600160401b038111156108a5576108a5615707565b6040519080825280602002602001820160405280156108d857816020015b60608152602001906001900390816108c35790505b509250806001600160401b038111156108f3576108f3615707565b60405190808252806020026020018201604052801561092657816020015b60608152602001906001900390816109115790505b50915060005b818110156109a6576109598588838151811061094a5761094a6156f1565b602002602001015133896125f3565b85838151811061096b5761096b6156f1565b60200260200101858481518110610984576109846156f1565b602002602001018290528290525050808061099e906156aa565b91505061092c565b50509250925092565b6109b88261055e565b15610a105760405162461bcd60e51b815260206004820152602260248201527f53696c6f2e7265706179466f723a20626f72726f77657220697320736f6c76656044820152611b9d60f21b60648201526084016105b2565b610a1c83833384611401565b50505050565b610a2a61285a565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac39190810190614e06565b905060005b8151811015610b9f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610b0d57610b0d6156f1565b60200260200101516001600160a01b031614610b8d57600260036000848481518110610b3b57610b3b6156f1565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060020160086101000a81548160ff02191690836002811115610b8757610b876156db565b02179055505b80610b97816156aa565b915050610ac8565b5061087861285a565b6001600160a01b0382811660009081526002602081905260408083209091015490516370a0823160e01b81528484166004820152919216906370a08231906024015b60206040518083038186803b158015610c0257600080fd5b505afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190615011565b158015610c7f575060015b6001600160a01b0384166000908152600360205260409020600290810154600160401b900460ff1690811115610c7d57610c7d6156db565b145b90505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce357600080fd5b505afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190614b81565b905060005b82811015610a1c57610d58848483818110610d3d57610d3d6156f1565b9050602002016020810190610d529190614b64565b83612a86565b80610d62816156aa565b915050610d20565b610d72614abd565b506001600160a01b03908116600090815260026020818152604092839020835160c0810185528154861681526001820154861692810192909252918201549093169183019190915260038101546060830152600481015460808301526005015460a082015290565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190614b81565b6001600160a01b0316336001600160a01b031614610e9b5760405162461bcd60e51b81526004016105b2906153ba565b610a1c84848484611f6e565b610a1c8333338585612adf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190614b81565b6001600160a01b0316336001600160a01b031614610f755760405162461bcd60e51b81526004016105b2906153ba565b610f828585858585612adf565b505050505050565b6001600160a01b038281166000908152600260205260408082205490516370a0823160e01b81528484166004820152919216906370a082319060240160206040518083038186803b158015610fde57600080fd5b505afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110169190615011565b15801561106257506001600160a01b03838116600090815260026020526040908190206001015490516370a0823160e01b815284831660048201529116906370a0823190602401610bea565b8015610c7f57506001610c45565b61109d6040518060600160405280600081526020016000815260200160006001600160401b031681525090565b50604080516060810182526001600160a01b039092166000818152600260208181528483206003808201548852600590910154828801529383529290925282902001546001600160401b03169082015290565b6111186040805160808101825260008082526020820181905291810182905290606082015290565b6001600160a01b0382166000908152600360209081526040918290208251608081018452815481526001820154928101929092526002808201546001600160401b03811694840194909452919290916060840191600160401b900460ff1690811115611186576111866156db565b6002811115611197576111976156db565b90525092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190614b81565b6001600160a01b0316336001600160a01b0316146112615760405162461bcd60e51b81526004016105b2906153ba565b610a1c84338585856118a8565b60006001600160a01b03831661128657506000610c82565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198616179052905160009182916001600160a01b038716916112cc916151ae565b600060405180830381855afa9150503d8060008114611307576040519150601f19603f3d011682016040523d82523d6000602084013e61130c565b606091505b509150915081801561132d57508080602001905181019061132d9190614f6e565b95945050505050565b60006001600160a01b03821661134e57506000919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03861691611391916151ae565b600060405180830381855afa9150503d80600081146113cc576040519150601f19603f3d011682016040523d82523d6000602084013e6113d1565b606091505b5091509150816113e5575060009392505050565b808060200190518101906113f99190615011565b949350505050565b600084816001600160a01b0382166000908152600360205260409020600290810154600160401b900460ff169081111561143d5761143d6156db565b141561148b5760405162461bcd60e51b815260206004820152601e60248201527f4261736553696c6f3a20617373657420646f6573206e6f74206578697374000060448201526064016105b2565b61149586426122f8565b6001600160a01b0386166000908152600260205260408120906114b9828887612d0b565b9095509050806114ce57600093505050611729565b866001600160a01b0316886001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac46848760405161151391815260200190565b60405180910390a36040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a082319060240160206040518083038186803b15801561155d57600080fd5b505afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190615011565b90506115ac6001600160a01b038a16883089612e85565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a082319060240160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190615011565b9050866116338383615667565b10156116a05760405162461bcd60e51b815260206004820152603660248201527f53696c6f3a207472616e7366657272656420616d6f756e74206973206c6f77656044820152751c881d1a185d081c995c5d5a5c995908185b5bdd5b9d60521b60648201526084016105b2565b6002840154604051632770a7eb60e21b81526001600160a01b038b811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050508684600501600082825461171c9190615667565b9091555087965050505050505b50949350505050565b600080600061174085612ef0565b905061174b8161300c565b61175c5760008092509250506118a1565b600085600001516001600160a01b0316635ddf2be36040518163ffffffff1660e01b815260040160206040518083038186803b15801561179b57600080fd5b505afa1580156117af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d39190614b81565b905060006117e682886040015185613052565b905060006117f38261300c565b90508061180a5760008095509550505050506118a1565b6000611816848a613290565b905060006118238261300c565b90508061183e576000196000975097505050505050506118a1565b60006118598b600001518c602001518d604001518d876132ae565b90508161186e670de0b6b3a764000086615648565b611878919061552b565b98508161188d670de0b6b3a764000083615648565b611897919061552b565b9750505050505050505b9250929050565b600260005414156118cb5760405162461bcd60e51b81526004016105b2906153e8565b6002600055846118db81426122f8565b6118e58685610ba8565b6119285760405162461bcd60e51b81526020600482015260146024820152734465706f7369744e6f74506f737369626c65282960601b60448201526064016105b2565b6001600160a01b03861660008181526002602052604080822090516370a0823160e01b81523060048201529092906370a082319060240160206040518083038186803b15801561197757600080fd5b505afa15801561198b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119af9190615011565b90506119c66001600160a01b038916883088612e85565b6040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a082319060240160206040518083038186803b158015611a0857600080fd5b505afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190615011565b9050611a4c8282615667565b9550600085611a5f578360030154611a65565b83600401545b90508515611b87576000611b03828660010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb9190615011565b8a9190613345565b9050611b0f8883615513565b60048681019190915560018601546040516340c10f1960e01b81526001600160a01b038c811693820193909352602481018490529116906340c10f1990604401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b5050505050611c55565b6000611bdd828660000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac357600080fd5b9050611be98883615513565b600386015584546040516340c10f1960e01b81526001600160a01b038b8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015611c3b57600080fd5b505af1158015611c4f573d6000803e3d6000fd5b50505050505b6040805188815287151560208201526001600160a01b03808b1692908d16917fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb5910160405180910390a35050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ddf2be36040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190614b81565b604051635b26eec960e11b81523060048201526001600160a01b0384811660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b64ddd929060440160206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190615011565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1357600080fd5b505afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b919061502a565b611e5690600a61559c565b6001600160a01b03848116600081815260026020526040908190206003015490516341976e0960e01b81526004810192909252918516906341976e099060240160206040518083038186803b158015611eae57600080fd5b505afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190615011565b611ef09190615648565b611efa919061552b565b1115611f605760405162461bcd60e51b815260206004820152602f60248201527f4261736553696c6f3a20746f74616c206465706f73697473206578636565642060448201526e1b1a5c5d5a591a5d1e481b1a5b5a5d608a1b60648201526084016105b2565b505060016000555050505050565b60026000541415611f915760405162461bcd60e51b81526004016105b2906153e8565b6002600055611fa08484610f8a565b611fe05760405162461bcd60e51b8152602060048201526011602482015270426f72726f774e6f74506f737369626c6560781b60448201526064016105b2565b80611fea8561337d565b10156120385760405162461bcd60e51b815260206004820152601a60248201527f4261736553696c6f3a206465706f7369742073686f727461676500000000000060448201526064016105b2565b6001600160a01b038416600090815260026020526040902061205a85426122f8565b60008160050154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190615011565b90506000811561212257670de0b6b3a76400006121138387615648565b61211d919061552b565b612125565b60005b905060006121c6848660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b59190615011565b6121bf858a615513565b9190613345565b60028601546040516340c10f1960e01b81526001600160a01b038b81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561221857600080fd5b505af115801561222c573d6000803e3d6000fd5b5050505081868561223d9190615513565b6122479190615513565b60058601556001600160a01b03891660009081526003602052604081206001018054849290612277908490615513565b92505081905550876001600160a01b0316896001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b52886040516122c391815260200190565b60405180910390a36122df6001600160a01b038a168888613417565b6122e888613447565b5050600160005550505050505050565b6040516344cf3e9360e01b81523060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906344cf3e939060440160206040518083038186803b15801561235f57600080fd5b505afa158015612373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123979190614f6e565b156123d35760405162461bcd60e51b815260206004820152600c60248201526b14da5b1bce881c185d5cd95960a21b60448201526064016105b2565b6001600160a01b03821660009081526002602081815260408084206003909252909220908101546001600160401b03168314156124105750505050565b600061241b85613510565b60405162f704bf60e21b81526001600160a01b0387811660048301526024820187905291909116906303dc12fc90604401602060405180830381600087803b15801561246657600080fd5b505af115801561247a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249e9190615011565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fb57600080fd5b505afa15801561250f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125339190615011565b60058501549091506000670de0b6b3a76400006125508584615648565b61255a919061552b565b90506000670de0b6b3a76400006125718584615648565b61257b919061552b565b905060006125898284615667565b90506125958385615513565b600589015560038801546125aa908290615513565b600389015560018701546125bf908390615513565b60018801555050506002909301805467ffffffffffffffff19166001600160401b0396909616959095179094555050505050565b606080600260005414156126195760405162461bcd60e51b81526004016105b2906153e8565b60026000556126278561055e565b1561267d57600086516001600160401b0381111561264757612647615707565b604051908082528060200260200182016040528015612670578160200160208202803683370190505b50925082915061284a9050565b6126888686866135b4565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da5906126c19088908a90879087908a9060040161526b565b600060405180830381600087803b1580156126db57600080fd5b505af11580156126ef573d6000803e3d6000fd5b5050505060005b86518110156127fb57828181518110612711576127116156f1565b602002602001015160001415806127425750818181518110612735576127356156f1565b6020026020010151600014155b156127e957856001600160a01b0316878281518110612763576127636156f1565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef9728484815181106127a7576127a76156f1565b60200260200101518685815181106127c1576127c16156f1565b60200260200101516040516127e0929190918252602082015260400190565b60405180910390a35b806127f3816156aa565b9150506126f6565b506128058561055e565b61284a5760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b60448201526064016105b2565b6001600055909590945092505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190614b81565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600260205260409020549192501661295b5761295b817f0000000000000000000000000000000000000000000000000000000000000000600061383a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b1580156129b657600080fd5b505afa1580156129ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f29190810190614e06565b905060005b81518110156105595760006001600160a01b031660026000848481518110612a2157612a216156f1565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054161415612a7457612a7483838381518110612a6557612a656156f1565b6020026020010151600161383a565b80612a7e816156aa565b9150506129f7565b6001600160a01b03821660009081526003602052604081206001810154815491929091612ab39083615667565b905080612ac1575050505050565b818355612ad86001600160a01b0386168583613417565b5050505050565b600060026000541415612b045760405162461bcd60e51b81526004016105b2906153e8565b6002600090815586906001600160a01b0382166000908152600360205260409020600290810154600160401b900460ff1690811115612b4557612b456156db565b1415612b935760405162461bcd60e51b815260206004820152601e60248201527f4261736553696c6f3a20617373657420646f6573206e6f74206578697374000060448201526064016105b2565b612b9d87426122f8565b6001600160a01b0387166000908152600260205260408120908415612bfb5760048201546001830154612be2908b9083908a906001600160a01b03168d8d6000613c83565b97509150612bf08782615667565b600484015550612c33565b60038201548254612c1e908b9083908a906001600160a01b03168d8d6000613c83565b97509150612c2c8782615667565b6003840155505b612c3c8861055e565b612c975760405162461bcd60e51b815260206004820152602660248201527f4261736553696c6f3a206e6f7420736f6c76656e7420696e2073696c6f20706f60448201526539b4ba34b7b760d11b60648201526084016105b2565b866001600160a01b0316886001600160a01b03168a6001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f02838989604051612cf19291909182521515602082015260400190565b60405180910390a450506001600055509195945050505050565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a082319060240160206040518083038186803b158015612d5957600080fd5b505afa158015612d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d919190615011565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612de557600080fd5b505afa158015612df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1d9190615011565b6005880154909150600019861415612e46579192508291612e3f838284613eba565b9450612e7a565b6000612e53848385613eba565b9050808711612e7157612e67878385613345565b9450869550612e78565b8394508095505b505b505050935093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a1c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613edf565b606081606001515182604001515114612f1c5760405163779ab6bd60e11b815260040160405180910390fd5b8160400151516001600160401b03811115612f3957612f39615707565b604051908082528060200260200182016040528015612f62578160200160208202803683370190505b50905060005b826040015151811015613006576000612fa88460200151856000015186604001518581518110612f9a57612f9a6156f1565b602002602001015142613fb1565b9050612fd684606001518381518110612fc357612fc36156f1565b60200260200101518560800151836140cd565b838381518110612fe857612fe86156f1565b60209081029190910101525080612ffe816156aa565b915050612f68565b50919050565b6000805b82518110156130065782818151811061302b5761302b6156f1565b60200260200101518261303e9190615513565b91508061304a816156aa565b915050613010565b606081518351146130765760405163779ab6bd60e11b815260040160405180910390fd5b82516001600160401b0381111561308f5761308f615707565b6040519080825280602002602001820160405280156130b8578160200160208202803683370190505b50905060005b8351811015613288578281815181106130d9576130d96156f1565b6020026020010151600014156130ee57613276565b6000856001600160a01b03166341976e09868481518110613111576131116156f1565b60200260200101516040518263ffffffff1660e01b815260040161314491906001600160a01b0391909116815260200190565b60206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131949190615011565b905060008583815181106131aa576131aa6156f1565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ea57600080fd5b505afa1580156131fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613222919061502a565b9050613255828260ff1687868151811061323e5761323e6156f1565b60200260200101516141b49092919063ffffffff16565b848481518110613267576132676156f1565b60200260200101818152505050505b80613280816156aa565b9150506130be565b509392505050565b6060600061329d836141cb565b90506113f984846040015183613052565b600081518451146132d25760405163779ab6bd60e11b815260040160405180910390fd5b60005b845181101561333b5761331d87878784815181106132f5576132f56156f1565b602002602001015187878681518110613310576133106156f1565b602002602001015161440e565b6133279083615513565b915080613333816156aa565b9150506132d5565b5095945050505050565b6000811580613352575082155b1561335e575082613376565b826133698386615648565b613373919061552b565b90505b9392505050565b6001600160a01b03811660008181526002602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a082319060240160206040518083038186803b1580156133d557600080fd5b505afa1580156133e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340d9190615011565b610c829190615667565b6040516001600160a01b03831660248201526044810182905261055990849063a9059cbb60e01b90606401612eb9565b60008061345261068c565b915091506000806134c56040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001876001600160a01b03168152506000611732565b9150915080821115612ad85760405162461bcd60e51b81526020600482015260146024820152732130b9b2a9b4b6379d1036b0bc34b6bab6a62a2b60611b60448201526064016105b2565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc9060440160206040518083038186803b15801561357c57600080fd5b505afa158015613590573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190614b81565b825160609081904290806001600160401b038111156135d5576135d5615707565b6040519080825280602002602001820160405280156135fe578160200160208202803683370190505b509350806001600160401b0381111561361957613619615707565b604051908082528060200260200182016040528015613642578160200160208202803683370190505b50925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafecffa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a057600080fd5b505afa1580156136b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d89190615011565b905060005b82811015612e78576000600260008b84815181106136fd576136fd6156f1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905061374a8a838151811061373c5761373c6156f1565b6020026020010151866122f8565b613757818a600019612d0b565b5086838151811061376a5761376a6156f1565b60200260200101818152505060006137b78b848151811061378d5761378d6156f1565b602090810291909101015160048401546001850154600019906001600160a01b03168e8e8a613c83565b91505060006137f88c85815181106137d1576137d16156f1565b602090810291909101015160038501548554600019906001600160a01b03168f8f8b613c83565b915061380690508183615513565b898581518110613818576138186156f1565b6020026020010181815250505050508080613832906156aa565b9150506136dd565b60608060006138488561456a565b90508315613945576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600260205260408082205481516395d89b4160e01b81529151929316916395d89b41916004808201928692909190829003018186803b1580156138c257600080fd5b505afa1580156138d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138fe9190810190614f8b565b905080604051806040016040528060018152602001602d60f81b8152508360405160200161392e93929190615228565b60405160208183030381529060405293505061398c565b60006040518060400160405280600481526020016353696c6f60e01b815250905080826040516020016139799291906151f9565b6040516020818303038152906040529350505b6000836040518060400160405280601081526020016f2d636f6c6c61746572616c2d4f4e4c5960801b8152506040516020016139c99291906151f9565b60408051601f1981840301815282820182526005835264446562742d60d81b6020848101919091529151909350613a0392918791016151f9565b60408051601f198184030181529082905263f8f38d1b60e01b825293506001600160a01b0388169063f8f38d1b90613a4390879081908b9060040161537c565b602060405180830381600087803b158015613a5d57600080fd5b505af1158015613a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a959190614b81565b6001600160a01b038781166000908152600260205260409081902080546001600160a01b03191693831693909317909255905163f8f38d1b60e01b81529088169063f8f38d1b90613aee90849081908b9060040161537c565b602060405180830381600087803b158015613b0857600080fd5b505af1158015613b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b409190614b81565b6001600160a01b038781166000908152600260205260409081902060010180546001600160a01b031916938316939093179092559051633b0eb45d60e21b81529088169063ec3ad17490613b9c90869081908b9060040161537c565b602060405180830381600087803b158015613bb657600080fd5b505af1158015613bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bee9190614b81565b6001600160a01b0396871660008181526002602081815260408084208301805496909c166001600160a01b031996871617909b55600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516909317909355600390915296909620909501805468ff00000000000000001916600160401b179055505050505050565b600080600019871415613d8f576040516370a0823160e01b81526001600160a01b0386811660048301528716906370a082319060240160206040518083038186803b158015613cd157600080fd5b505afa158015613ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d099190615011565b9150613d8888876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4857600080fd5b505afa158015613d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d809190615011565b849190613eba565b9050613e12565b613e0c88876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613dcc57600080fd5b505afa158015613de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e049190615011565b899190613345565b91508690505b80613e2257506000905080613eae565b604051632770a7eb60e21b81526001600160a01b03868116600483015260248201849052871690639dc29fac90604401600060405180830381600087803b158015613e6c57600080fd5b505af1158015613e80573d6000803e3d6000fd5b5050505082600014613e9a57613e97898285614652565b90505b613eae6001600160a01b038a168583613417565b97509795505050505050565b6000811580613ec7575082155b15613ed457506000613376565b816133698486615648565b6000613f34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146a29092919063ffffffff16565b8051909150156105595780806020019051810190613f529190614f6e565b6105595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b2565b60405163122cfaaf60e21b81526001600160a01b038581166004830152838116602483015260009182918616906348b3eabc9060440160206040518083038186803b158015613fff57600080fd5b505afa158015614013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140379190614b81565b60405163b1e0176560e01b81526001600160a01b0388811660048301528681166024830152604482018690529192509082169063b1e017659060640160206040518083038186803b15801561408b57600080fd5b505afa15801561409f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c39190615011565b9695505050505050565b60408084015190516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a082319060240160206040518083038186803b15801561411857600080fd5b505afa15801561412c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141509190615011565b905080614161576000915050613376565b60006141718660a00151856146b1565b90506140c38187604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4857600080fd5b60006141c182600a615590565b6133698486615648565b60608160400151516001600160401b038111156141ea576141ea615707565b604051908082528060200260200182016040528015614213578160200160208202803683370190505b50905060005b8260400151518110156130065760008360600151828151811061423e5761423e6156f1565b60209081029190910101515160808501516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561429057600080fd5b505afa1580156142a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c89190615011565b90506000846060015183815181106142e2576142e26156f1565b602090810291909101810151015160808601516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561433657600080fd5b505afa15801561434a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436e9190615011565b905061437a8183615513565b6143855750506143fc565b60006143aa8660200151876000015188604001518781518110612f9a57612f9a6156f1565b90506143da866060015185815181106143c5576143c56156f1565b60200260200101518484848a600001516146da565b8585815181106143ec576143ec6156f1565b6020026020010181815250505050505b80614406816156aa565b915050614219565b60008080846001811115614424576144246156db565b14156144b3576040516330be9d2560e21b81526001600160a01b038781166004830152868116602483015288169063c2fa7494906044015b60206040518083038186803b15801561447457600080fd5b505afa158015614488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ac9190615011565b9050614542565b60018460018111156144c7576144c76156db565b141561450357604051630ca4db1160e21b81526001600160a01b03878116600483015286811660248301528816906332936c449060440161445c565b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465644c545654797065282960601b60448201526064016105b2565b670de0b6b3a76400006145558285615648565b61455f919061552b565b979650505050505050565b604080516395d89b4160e01b602082015260609160009182916001600160a01b038616910160408051601f19818403018152908290526145a9916151ae565b600060405180830381855afa9150503d80600081146145e4576040519150601f19603f3d011682016040523d82523d6000602084013e6145e9565b606091505b50915091508161460857604051806020016040528060008152506113f9565b805160201461462a57808060200190518101906146259190614f8b565b6113f9565b6113f98160405160200161463e91906151ae565b604051602081830303815290604052614859565b6001600160a01b038316600090815260036020526040812060010154819061467b9085856148e5565b6001600160a01b039096166000908152600360205260409020600101959095555050500390565b60606133738484600085614913565b6000670de0b6b3a76400006146c68385615648565b6146d0919061552b565b610c7f9084615513565b60008085156147e7576147e26147658860600151856001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561472757600080fd5b505afa15801561473b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061475f9190615011565b87614a30565b88600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156147a257600080fd5b505afa1580156147b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147da9190615011565b889190613eba565b6147ea565b60005b90506000851561483e57614839886080015189602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156147a257600080fd5b614841565b60005b905061484d8183615513565b98975050505050505050565b805160609060005b818110156148de5783818151811061487b5761487b6156f1565b01602001516001600160f81b031916614895575050919050565b828482815181106148a8576148a86156f1565b602001015160f81c60f81b6040516020016148c49291906151ca565b60408051601f198184030181529190529250600101614861565b5050919050565b670de0b6b3a76400008183020460008119851115614906575060001961490b565b508381015b935093915050565b6060824710156149745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105b2565b843b6149c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b2565b600080866001600160a01b031685876040516149de91906151ae565b60006040518083038185875af1925050503d8060008114614a1b576040519150601f19603f3d011682016040523d82523d6000602084013e614a20565b606091505b509150915061455f828286614a84565b600080614a4584670de0b6b3a7640000615667565b9050670de0b6b3a76400008082614a5c8689615648565b614a669190615648565b614a70919061552b565b614a7a919061552b565b61132d9086615513565b60608315614a93575081613376565b825115614aa35782518084602001fd5b8160405162461bcd60e51b81526004016105b29190615369565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600082601f830112614b1f57600080fd5b8135614b32614b2d826154ec565b615499565b818152846020838601011115614b4757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215614b7657600080fd5b81356133768161571d565b600060208284031215614b9357600080fd5b81516133768161571d565b60008060408385031215614bb157600080fd5b8235614bbc8161571d565b91506020830135614bcc8161571d565b809150509250929050565b60008060008060808587031215614bed57600080fd5b8435614bf88161571d565b93506020850135614c088161571d565b92506040850135614c188161571d565b9396929550929360600135925050565b600080600080600060a08688031215614c4057600080fd5b8535614c4b8161571d565b94506020860135614c5b8161571d565b93506040860135614c6b8161571d565b9250606086013591506080860135614c8281615732565b809150509295509295909350565b600080600060608486031215614ca557600080fd5b8335614cb08161571d565b92506020840135614cc08161571d565b929592945050506040919091013590565b60008060008060808587031215614ce757600080fd5b8435614cf28161571d565b93506020850135614d028161571d565b9250604085013591506060850135614d1981615732565b939692955090935050565b60008060408385031215614d3757600080fd5b8235614d428161571d565b946020939093013593505050565b600080600060608486031215614d6557600080fd5b8335614d708161571d565b9250602084013591506040840135614d8781615732565b809150509250925092565b60008060208385031215614da557600080fd5b82356001600160401b0380821115614dbc57600080fd5b818501915085601f830112614dd057600080fd5b813581811115614ddf57600080fd5b8660208260051b8501011115614df457600080fd5b60209290920196919550909350505050565b60006020808385031215614e1957600080fd5b82516001600160401b03811115614e2f57600080fd5b8301601f81018513614e4057600080fd5b8051614e4e614b2d826154c9565b80828252848201915084840188868560051b8701011115614e6e57600080fd5b600094505b83851015614e9a578051614e868161571d565b835260019490940193918501918501614e73565b50979650505050505050565b60008060408385031215614eb957600080fd5b82356001600160401b0380821115614ed057600080fd5b818501915085601f830112614ee457600080fd5b81356020614ef4614b2d836154c9565b8083825282820191508286018a848660051b8901011115614f1457600080fd5b600096505b84871015614f40578035614f2c8161571d565b835260019690960195918301918301614f19565b5096505086013592505080821115614f5757600080fd5b50614f6485828601614b0e565b9150509250929050565b600060208284031215614f8057600080fd5b815161337681615732565b600060208284031215614f9d57600080fd5b81516001600160401b03811115614fb357600080fd5b8201601f81018413614fc457600080fd5b8051614fd2614b2d826154ec565b818152856020838501011115614fe757600080fd5b61132d82602083016020860161567e565b60006020828403121561500a57600080fd5b5035919050565b60006020828403121561502357600080fd5b5051919050565b60006020828403121561503c57600080fd5b815160ff8116811461337657600080fd5b600081518084526020808501945080840160005b838110156150865781516001600160a01b031687529582019590820190600101615061565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b848110156150dc57601f198684030189526150ca8383516150e9565b988401989250908301906001016150ae565b5090979650505050505050565b600081518084526020808501945080840160005b83811015615086578151875295820195908201906001016150fd565b6000815180845261513181602086016020860161567e565b601f01601f19169290920160200192915050565b6003811061516357634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03908116835260208083015182169084015260408083015190911690830152606080820151908301526080808201519083015260a090810151910152565b600082516151c081846020870161567e565b9190910192915050565b600083516151dc81846020880161567e565b6001600160f81b0319939093169190920190815260010192915050565b6000835161520b81846020880161567e565b83519083019061521f81836020880161567e565b01949350505050565b6000845161523a81846020890161567e565b84519083019061524e81836020890161567e565b845191019061526181836020880161567e565b0195945050505050565b6001600160a01b038616815260a06020820181905260009061528f9083018761504d565b82810360408401526152a181876150e9565b905082810360608401526152b581866150e9565b9050828103608084015261484d8185615119565b602081526000610c7f602083018461504d565b6060815260006152ef606083018661504d565b82810360208401526153018186615091565b905082810360408401526140c38185615091565b604081526000615328604083018561504d565b82810360208481019190915284518083528582019282019060005b818110156150dc57615356838651615167565b9383019360c09290920191600101615343565b602081526000610c7f6020830184615119565b60608152600061538f6060830186615119565b82810360208401526153a18186615119565b91505060018060a01b0383166040830152949350505050565b6020808252601490820152732130b9b2a9b4b6379d1037b7363ca937baba32b960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060808201905082518252602083015160208301526001600160401b036040840151166040830152606083015161545a6060840182615145565b5092915050565b60c08101610c828284615167565b848152602081018490526001600160401b03831660408201526080810161132d6060830184615145565b604051601f8201601f191681016001600160401b03811182821017156154c1576154c1615707565b604052919050565b60006001600160401b038211156154e2576154e2615707565b5060051b60200190565b60006001600160401b0382111561550557615505615707565b50601f01601f191660200190565b60008219821115615526576155266156c5565b500190565b60008261554857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561558857816000190482111561556e5761556e6156c5565b8085161561557b57918102915b93841c9390800290615552565b509250929050565b6000610c7f83836155a7565b6000610c7f60ff8416835b6000826155b657506001610c82565b816155c357506000610c82565b81600181146155d957600281146155e3576155ff565b6001915050610c82565b60ff8411156155f4576155f46156c5565b50506001821b610c82565b5060208310610133831016604e8410600b8410161715615622575081810a610c82565b61562c838361554d565b8060001904821115615640576156406156c5565b029392505050565b6000816000190483118215151615615662576156626156c5565b500290565b600082821015615679576156796156c5565b500390565b60005b83811015615699578181015183820152602001615681565b83811115610a1c5750506000910152565b60006000198214156156be576156be6156c5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461087857600080fd5b801515811461087857600080fdfea26469706673582212201c1e56b480dd7d4427ad824c1ac714fdbe14d52afe3a0899ddc1a2c45503986564736f6c63430008070033a26469706673582212208cfd2cce6d2fd46aedde44cb19e938fbec7a79a3a7a899d3ab415b23e6bcb06164736f6c63430008070033",
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "details": "Silo Factory is registered within SiloRepository contract and it's given a version. Each version is differet Silo Factory that deploys different Silo implementation. Many Factory contracts can be registered with the Repository contract.",
    "kind": "dev",
    "methods": {
      "createSilo(address,bytes)": {
        "params": {
          "_data": "(optional) data that may be needed during silo creation",
          "_siloAsset": "unique asset for which Silo is deployed"
        },
        "returns": {
          "silo": "deployed Silo address"
        }
      },
      "siloFactoryPing()": {
        "details": "just a helper method to see if address is a factory"
      }
    },
    "title": "SiloFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewSiloCreated(address,address)": {
        "notice": "Emitted when Silo is deployed"
      }
    },
    "kind": "user",
    "methods": {
      "createSilo(address,bytes)": {
        "notice": "Deploys Silo"
      }
    },
    "notice": "Silo Factory has one job, deploy Silo implementaiton",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}