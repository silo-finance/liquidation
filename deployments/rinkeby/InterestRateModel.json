{
  "address": "0xd99b81599d2A8A586f6CB18CFE87eBEB1A180014",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "indexed": false,
          "internalType": "struct IInterestRateModel.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DP",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RCOMP_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "X_MAX",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_c",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "_u",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateCompoundInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "ri",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Tcrit",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_c",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "_u",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateCurrentInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcur",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [
        {
          "internalType": "int256",
          "name": "uopt",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ucrit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ulow",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ki",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "kcrit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "klow",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "klin",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "beta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ri",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Tcrit",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCompoundInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCompoundInterestRateAndUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCurrentInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcur",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModelPing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc681d09a2894ac29572e53f8c4c4105ea881afc0142bf735a32f5900b251c3be",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xd99b81599d2A8A586f6CB18CFE87eBEB1A180014",
    "transactionIndex": 74,
    "gasUsed": "2318194",
    "logsBloom": "0x
    "blockHash": "0x1860215b005e276f5696c0efdb2eeffdf0bb9e123b86762cd35d32185e2e9157",
    "transactionHash": "0xc681d09a2894ac29572e53f8c4c4105ea881afc0142bf735a32f5900b251c3be",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 10412079,
        "transactionHash": "0xc681d09a2894ac29572e53f8c4c4105ea881afc0142bf735a32f5900b251c3be",
        "address": "0xd99b81599d2A8A586f6CB18CFE87eBEB1A180014",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 223,
        "blockHash": "0x1860215b005e276f5696c0efdb2eeffdf0bb9e123b86762cd35d32185e2e9157"
      },
      {
        "transactionIndex": 74,
        "blockNumber": 10412079,
        "transactionHash": "0xc681d09a2894ac29572e53f8c4c4105ea881afc0142bf735a32f5900b251c3be",
        "address": "0xd99b81599d2A8A586f6CB18CFE87eBEB1A180014",
        "topics": [
          "0xf254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df458",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000853a0d2313c0000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000b334000000000000000000000000000000000000000000000000000000127520915700000000000000000000000000000000000000000000000000000007620d06ef00000000000000000000000000000000000000000000000000000000ec41a0dd00000000000000000000000000000000000000000000000000007e5196e2ae3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 224,
        "blockHash": "0x1860215b005e276f5696c0efdb2eeffdf0bb9e123b86762cd35d32185e2e9157"
      }
    ],
    "blockNumber": 10412079,
    "cumulativeGasUsed": "10680676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "uopt": "200000000000000000",
      "ucrit": "600000000000000000",
      "ulow": "100000000000000000",
      "ki": "45876",
      "kcrit": "79274479959",
      "klow": "31709791983",
      "klin": "3963723997",
      "beta": "138888888888888",
      "ri": "0",
      "Tcrit": "0"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "4e6ec95f1876ffdb5c89e088426a74e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DP\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RCOMP_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"X_MAX\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_c\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"_u\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateCompoundInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_c\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"_u\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcur\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCompoundInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCompoundInterestRateAndUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCurrentInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcur\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModelPing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"details\":\"Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment for seamless service. Please refer to separte litepaper about model for design details.\",\"events\":{\"ConfigUpdate(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"params\":{\"asset\":\"asset address for which config should be set\",\"config\":\"config sturct for asset in Silo\",\"silo\":\"Silo address for which config should be set\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"calculateCompoundInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)\":{\"details\":\"pure function that calculates interest rate based on raw input data\",\"params\":{\"_blockTimestamp\":\"current block timestamp\",\"_c\":\"configuration object, InterestRateModel.Config\",\"_interestRateTimestamp\":\"timestamp of last interest rate update\",\"_u\":\"asset untilization\"},\"returns\":{\"Tcrit\":\"time during which the utilization exceeds the critical value\",\"rcomp\":\"compounded interest rate from last update until now\",\"ri\":\"current integral part of the rate\"}},\"calculateCurrentInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)\":{\"details\":\"pure function that calculates current annual interest rate\",\"params\":{\"_blockTimestamp\":\"current block timestamp\",\"_c\":\"configuration object, InterestRateModel.Config\",\"_interestRateTimestamp\":\"timestamp of last interest rate update\",\"_u\":\"asset untilization\"},\"returns\":{\"rcur\":\"current annual interest rate\"}},\"getCompoundInterestRate(address,address,uint256)\":{\"details\":\"get compound interest rate\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\",\"_silo\":\"address of Silo\"},\"returns\":{\"rcomp\":\"compounded interest rate from last update until now\"}},\"getCompoundInterestRateAndUpdate(address,uint256)\":{\"details\":\"get compound interest rate and update model storage\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\"},\"returns\":{\"rcomp\":\"compounded interest rate from last update until now\"}},\"getConfig(address,address)\":{\"details\":\"Get config for giver asset in a Silo. If dedicated config is not set, default one will be returned.\",\"params\":{\"_asset\":\"asset address for which config should be set\",\"_silo\":\"Silo address for which config should be set\"},\"returns\":{\"_0\":\"Config sturct for asset in Silo\"}},\"getCurrentInterestRate(address,address,uint256)\":{\"details\":\"get current annual interest rate\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\",\"_silo\":\"address of Silo\"},\"returns\":{\"rcur\":\"current annual interest rate\"}},\"interestRateModelPing()\":{\"details\":\"just a helper method to see if address is a InterestRateModel\",\"returns\":{\"_0\":\"always true\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setConfig(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"details\":\"Set dedicated config for giver asset in a Silo. Config is per asset per Silo so different assets in different Silo can have different configs.\",\"params\":{\"_asset\":\"asset address for which config should be set\",\"_silo\":\"Silo address for which config should be set\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"DP\":{\"details\":\"DP is 18 decimal points used for integer calculations\"},\"RCOMP_MAX\":{\"details\":\"maximum value of compound interest the model will return\"},\"X_MAX\":{\"details\":\"maximum value of X for which, RCOMP_MAX should be returned\"}},\"title\":\"InterestRateModel\",\"version\":1},\"userdoc\":{\"events\":{\"ConfigUpdate(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"notice\":\"Emitted on config change\"},\"OwnershipPending(address,address)\":{\"notice\":\"Emitted when ownership transfer is proposed, aka pending owner is set\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Dynamic interest rate model implementation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateModel.sol\":\"InterestRateModel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./lib/PRBMathSD59x18.sol\\\";\\nimport \\\"./lib/ModelStats.sol\\\";\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./utils/TwoStepOwnable.sol\\\";\\n\\n/// @title InterestRateModel\\n/// @notice Dynamic interest rate model implementation\\n/// @dev Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment\\n/// for seamless service. Please refer to separte litepaper about model for design details.\\n/// @custom:security-contact security@silo.finance\\ncontract InterestRateModel is IInterestRateModel, TwoStepOwnable {\\n    using PRBMathSD59x18 for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev DP is 18 decimal points used for integer calculations\\n    int256 public constant override DP = 1e18;\\n\\n    /// @dev maximum value of compound interest the model will return\\n    uint256 public constant RCOMP_MAX = 340282366920938463220434743172917753976000000000000000000;\\n\\n    /// @dev maximum value of X for which, RCOMP_MAX should be returned\\n    int256 public constant X_MAX = 88722839111672999627;\\n\\n    // Silo => asset => ModelData\\n    mapping(address => mapping(address => Config)) public config;\\n\\n    /// @notice Emitted on config change\\n    /// @param silo Silo address for which config should be set\\n    /// @param asset asset address for which config should be set\\n    /// @param config config sturct for asset in Silo\\n    event ConfigUpdate(address indexed silo, address indexed asset, Config config);\\n\\n    constructor(Config memory _config) {\\n        _setConfig(address(0), address(0), _config);\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function setConfig(address _silo, address _asset, Config calldata _config) external override onlyOwner {\\n        _setConfig(_silo, _asset, _config);\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external override returns (uint256 rcomp) {\\n        // assume that caller is Silo\\n        address silo = msg.sender;\\n\\n        ISilo.UtilizationData memory data = ISilo(silo).utilizationData(_asset);\\n\\n        // TODO when depositing, we doing two calls for `calculateCompoundInterestRate`, maybe we can optimise?\\n        (rcomp, config[silo][_asset].ri, config[silo][_asset].Tcrit) = calculateCompoundInterestRate(\\n            getConfig(silo, _asset),\\n            ModelStats.calculateUtilization(DP, data.totalDeposits, data.totalBorrowAmount).toInt256(),\\n            data.interestRateTimestamp,\\n            _blockTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view override returns (uint256 rcomp) {\\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\\n\\n        (rcomp,,) = calculateCompoundInterestRate(\\n            getConfig(_silo, _asset),\\n            ModelStats.calculateUtilization(DP, data.totalDeposits, data.totalBorrowAmount).toInt256(),\\n            data.interestRateTimestamp,\\n            _blockTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view override returns (uint256 rcur) {\\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\\n\\n        rcur = calculateCurrentInterestRate(\\n            getConfig(_silo, _asset),\\n            ModelStats.calculateUtilization(DP, data.totalDeposits, data.totalBorrowAmount).toInt256(),\\n            data.interestRateTimestamp,\\n            _blockTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getConfig(address _silo, address _asset) public view override returns (Config memory) {\\n        if (config[_silo][_asset].uopt != 0) {\\n            return config[_silo][_asset];\\n        }\\n\\n        // use default config\\n        Config memory c = config[address(0)][address(0)];\\n\\n        // model data is always stored for each silo and asset so default values must be replaced\\n        c.ri = config[_silo][_asset].ri;\\n        c.Tcrit = config[_silo][_asset].Tcrit;\\n        return c;\\n    }\\n\\n    /* solhint-disable */\\n\\n    /// @inheritdoc IInterestRateModel\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) public pure override returns (uint256 rcur) {\\n        // T := t1 - t0 # length of time period in seconds\\n        int256 T = (_blockTimestamp - _interestRateTimestamp).toInt256();\\n\\n        int256 rp;\\n        if (_u > _c.ucrit) {\\n            // rp := kcrit *(1 + Tcrit + beta *T)*( u0 - ucrit )\\n            rp = _c.kcrit * (DP + _c.Tcrit + _c.beta * T) * (_u - _c.ucrit) / DP / DP;\\n        } else {\\n            // rp := min (0, klow * (u0 - ulow ))\\n            rp = _min(0, _c.klow * (_u - _c.ulow) / DP);\\n        }\\n\\n        // rlin := klin * u0 # lower bound between t0 and t1\\n        int256 rlin = _c.klin * _u / DP;\\n        // ri := max(ri , rlin )\\n        int256 ri = _max(_c.ri, rlin);\\n        // ri := max(ri + ki * (u0 - uopt ) * T, rlin )\\n        ri = _max(ri + _c.ki * (_u - _c.uopt) * T / DP, rlin);\\n        // rcur := max (ri + rp , rlin ) # current per second interest rate\\n        rcur = (_max(ri + rp, rlin)).toUint256();\\n        rcur *= 365 days;\\n    }\\n\\n    struct LocalVars {\\n        int256 T;\\n        int256 slopei;\\n        int256 rp;\\n        int256 slope;\\n        int256 r0;\\n        int256 rlin;\\n        int256 r1;\\n        int256 x;\\n        int256 rlin1;\\n        int256 rcomp;\\n    }\\n\\n    function interestRateModelPing() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) public pure override returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit\\n    ) {\\n        ri = _c.ri;\\n        Tcrit = _c.Tcrit;\\n\\n        // struct for local vars to avoid \\\"Stack too deep\\\"\\n        LocalVars memory _l = LocalVars(0,0,0,0,0,0,0,0,0,0);\\n\\n        // length of time period in seconds\\n        _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\\n\\n        // slopei := ki * (u0 - uopt )\\n        _l.slopei = _c.ki * (_u - _c.uopt) / DP;\\n\\n        if (_u > _c.ucrit) {\\n            // rp := kcrit * (1 + Tcrit) * (u0 - ucrit )\\n            _l.rp = _c.kcrit * (DP + Tcrit) * (_u - _c.ucrit) / DP / DP;\\n            // slope := slopei + kcrit * beta * (u0 - ucrit )\\n            _l.slope = _l.slopei + _c.kcrit * _c.beta * (_u - _c.ucrit) / DP / DP;\\n            // Tcrit := Tcrit + beta * T\\n            Tcrit = Tcrit + _c.beta * _l.T;\\n        } else {\\n            // rp := min (0, klow * (u0 - ulow ))\\n            _l.rp = _min(0, _c.klow * (_u - _c.ulow) / DP);\\n            // slope := slopei\\n            _l.slope = _l.slopei;\\n            // Tcrit := max (0, Tcrit - beta * T)\\n            Tcrit = _max(0, Tcrit - _c.beta * _l.T);\\n        }\\n\\n        // rlin := klin * u0 # lower bound between t0 and t1\\n        _l.rlin = _c.klin * _u / DP;\\n        // ri := max(ri , rlin )\\n        ri = _max(ri , _l.rlin);\\n        // r0 := ri + rp # interest rate at t0 ignoring lower bound\\n        _l.r0 = ri + _l.rp;\\n        // r1 := r0 + slope *T # what interest rate would be at t1 ignoring lower bound\\n        _l.r1 = _l.r0 + _l.slope * _l.T;\\n\\n        // Calculating the compound interest\\n\\n        if (_l.r0 >= _l.rlin && _l.r1 >= _l.rlin) {\\n            // lower bound isn\\u2019t activated\\n            // rcomp := exp (( r0 + r1) * T / 2) - 1\\n            _l.x = (_l.r0 + _l.r1) * _l.T / 2;\\n        } else if (_l.r0 < _l.rlin && _l.r1 < _l.rlin) {\\n            // lower bound is active during the whole time\\n            // rcomp := exp( rlin * T) - 1\\n            _l.x = _l.rlin * _l.T;\\n        } else if (_l.r0 >= _l.rlin && _l.r1 < _l.rlin) {\\n            // lower bound is active after some time\\n            // rcomp := exp( rlin *T - (r0 - rlin )^2/ slope /2) - 1\\n            _l.x = _l.rlin * _l.T - (_l.r0 - _l.rlin)**2 / _l.slope / 2;\\n        } else {\\n            // lower bound is active before some time\\n            // rcomp := exp( rlin *T + (r1 - rlin )^2/ slope /2) - 1\\n            _l.x = _l.rlin * _l.T + (_l.r1 - _l.rlin)**2 / _l.slope / 2;\\n        }\\n\\n        if (_l.x >= X_MAX) {\\n            rcomp = RCOMP_MAX;\\n        } else {\\n            _l.rcomp = _l.x.exp() - DP;\\n            rcomp = _l.rcomp > 0 ? _l.rcomp.toUint256() : 0;\\n        }\\n\\n        // ri := max(ri + slopei * T, rlin )\\n        ri = _max(ri + _l.slopei * _l.T, _l.rlin);\\n    }\\n\\n    /* solhint-enable */\\n\\n    /// @dev set config for silo and asset\\n    function _setConfig(address _silo, address _asset, Config memory _config) internal {\\n        config[_silo][_asset] = _config;\\n        emit ConfigUpdate(_silo, _asset, _config);\\n    }\\n\\n    /// @dev Returns the largest of two numbers\\n    function _max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Returns the smallest of two numbers\\n    function _min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x225e1834b01035a4b02ef526a7fd5c3d1006a3ce5c1654aeca7bd3946fcc5ea2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\nimport \\\"./ISiloRepository.sol\\\";\\n\\ninterface IBaseSilo {\\n    enum AssetStatus { Undefined, Active, Removed }\\n\\n    /// @dev Storage struct that holds all required data for a single token market\\n    struct AssetStorage {\\n        /// @dev Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        /// It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    /// @dev Storage struct that holds data related to fees and interest\\n    struct AssetInterestData {\\n        /// @dev Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\\n        /// generated interest.\\n        uint256 protocolFees;\\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\\n        uint64 interestRateTimestamp;\\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\\n        /// for that asset\\n        AssetStatus status;\\n    }\\n\\n    /// @notice data that InterestModel needs for calculations\\n    struct UtilizationData {\\n        uint256 totalDeposits;\\n        uint256 totalBorrowAmount;\\n        /// @dev timestamp of last interest accrual\\n        uint64 interestRateTimestamp;\\n    }\\n\\n    /// @notice Emitted when deposit is made\\n    /// @param asset asset address that was deposited\\n    /// @param depositor wallet address that deposited asset\\n    /// @param amount amount of asset that was deposited\\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    /// @notice Emitted when withdraw is made\\n    /// @param asset asset address that was withdrawn\\n    /// @param depositor wallet address that deposited asset\\n    /// @param receiver wallet address that received asset\\n    /// @param amount amount of asset that was withdrew\\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    /// @notice Emitted on asset borrow\\n    /// @param asset asset address that was borrowed\\n    /// @param user wallet address that borrowed asset\\n    /// @param amount amount of asset that was borrowed\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on asset repay\\n    /// @param asset asset address that was repaid\\n    /// @param user wallet address that repaid asset\\n    /// @param amount amount of asset that was repaid\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on user liquidation\\n    /// @param asset asset address that was liquidated\\n    /// @param user wallet address that was liquidated\\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\\n    /// ownership of underlying deposit.\\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\\n\\n    /// @notice Synchronize current bridge assets with Silo\\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\\n    /// should be disabled during asset sync.\\n    function syncBridgeAssets() external;\\n\\n    /// @notice Get Silo Repository contract address\\n    /// @return Silo Repository contract address\\n    function siloRepository() external view returns (ISiloRepository);\\n\\n    /// @notice Get asset storage data\\n    /// @param _asset asset address\\n    /// @return AssetStorage struct\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    /// @notice Get asset interest data\\n    /// @param _asset asset address\\n    /// @return AssetInterestData struct\\n    function interestData(address _asset) external view returns (AssetInterestData memory);\\n\\n    /// @dev helper method for InterestRateModel calculations\\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\\n\\n    /// @notice Calculates solvency of an account\\n    /// @param _user wallet address for which solvency is calculated\\n    /// @return true if solvent, false otherwise\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// @return assets array of initialized assets of Silo\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// with corresponding state\\n    /// @return assets array of initialized assets of Silo\\n    /// @return assetsStorage array of assets state corresponding to `assets` array\\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\\n\\n    /// @notice Check if depositing an asset for given account is possible\\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @notice Check if borrowing an asset for given account is possible\\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76e6ad63cf64bb49c5be4468950b545492265e0d200f6e16569f787fd1f5d08b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for giver asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for giver asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config sturct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x19e6633d7dea9df2f41b8617d1adc0663aee37c66ba5eaabc4adcd8eb3ec54dc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb48b97fe9aeca820bd8e067fb9682b577933e6653f5bf0617ab68f4f54a23ead\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffor for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xe7465c2a0138997490bb500af8359950251b2aa7bcbdf05c232ab38ea5a156d5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Check if prices are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of pice providers registerd\\n    /// @return number of pice providers registerd\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check funciton\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x060ebf77b1036628cb17549f9831aaab80aa164169a49e561428826c1340714e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt positon\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt positon\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /// @notice Returns token symbol\\n    /// @return token symbol\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2c231826b52ad5824db47830d686afa8e41dfc08b5f78f1a533ad2025fef5cb7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly) external;\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address of the collateral tokens source account\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external;\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address of the debt tokens receiver\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount) external;\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repayFor(address _asset, address _borrower, uint256 _amount) external;\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @param _assets array of assets we want to harvest fees from\\n    function harvestProtocolFees(address[] calldata _assets) external;\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    function accrueInterest(address _asset) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\\n    /// @param _users array of users to liquidate\\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    /// amounts of collaterals send to `_flashReceiver`\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    /// required amounts of debt to be repaid\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0xa77aca4e9cc89ed4758aabb4fc9e81030e68aabfb61193922ca7a8e8f6d0a500\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of assset for which Silo was deployed\\n    event NewSiloCreated(address indexed silo, address indexed asset);\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x8c339cc5ed5e5c5050a43478a2e55df6268a46efea6eff8b8e415b8108687d96\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (BaseSilo.PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (BaseSilo.PRECISION_DECIMALS())\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (BaseSilo.PRECISION_DECIMALS()).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param oldProvider address of old oracle repository\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository oldProvider,\\n        IPriceProvidersRepository newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param oldTokensFactory address of old token factory\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param oldRouter address of old router\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registerd Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregisterd Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param oldDefaultVersion old default version\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 oldDefaultVersion, uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function newSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external;\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS()). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for detailes see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for detailes see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (BaseSilo.PRECISION_DECIMALS())\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(address _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Set default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possbile that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possbile that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (BaseSilo.PRECISION_DECIMALS())\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (BaseSilo.PRECISION_DECIMALS() == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xb9a54186c0e9c0c304fa3cb1e12b4b7563d7c2de3a197098a00e2dcf10de6147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xc9897a2129b8d90ab9e89520fb5b5c2941b38c9631f556feaf2bd3dd006ac632\",\"license\":\"BUSL-1.1\"},\"contracts/lib/ModelStats.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nlibrary ModelStats {\\n    /// @notice Calculates fraction between borrowed and deposited amount of tokens denominated in percentage\\n    /// @dev It assumes 1e18 = 100%.\\n    /// @param _dp decimal points used by model\\n    /// @param _totalDeposits current total deposits for assets\\n    /// @param _totalBorrowAmount current total borrows for assets\\n    /// @return utilization value\\n    function calculateUtilization(int256 _dp, uint256 _totalDeposits, uint256 _totalBorrowAmount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_totalDeposits == 0 || _totalBorrowAmount == 0) return 0;\\n\\n        return _totalBorrowAmount * uint256(_dp) / _totalDeposits;\\n    }\\n}\\n\",\"keccak256\":\"0xceb89ac52dfd0648dc4703117bd2d028766a32c9db96ac02a803193769326dae\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PRBMathCommon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/* solhint-disable */\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\\n/// @author Paul Razvan Berg\\nlibrary PRBMathCommon {\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\\n            // may get very close to 2^256, which doesn't fit in int256.\\n            result = 0x80000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\\n\\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\\n            // by two when we set the result equal to 0.5 above.\\n            result = result << ((x >> 128) + 1);\\n\\n            // Convert the result to the signed 60.18-decimal fixed-point format.\\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0xb77773597e7b8afcb494f3c08a9f1d7607402e4b938ccb0cd30b7a249317d8f0\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./PRBMathCommon.sol\\\";\\n\\n/* solhint-disable */\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math. It works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 88722839111672999628.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59794705707972522261.\\n        if (x < -41446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 128e18.\\n        require(x < 88722839111672999628);\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 128e18 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^-x = 1/2^x.\\n        if (x < 0) {\\n            // 2**59.794705707972522262 is the maximum number whose inverse does not equal zero.\\n            if (x < -59794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked { result = 1e36 / exp2(-x); }\\n            return result;\\n        } else {\\n            // 2**128 doesn't fit within the 128.128-bit fixed-point representation.\\n            require(x < 128e18);\\n\\n            unchecked {\\n                // Convert x to the 128.128-bit fixed-point format.\\n                uint256 x128x128 = (uint256(x) << 128) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 128e18.\\n                result = int256(PRBMathCommon.exp2(x128x128));\\n            }\\n        }\\n    }\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x1cada908eea8b1f83c87b4496cca000a338f754965418b0c786ea086fec2b5bd\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @title TwoStepOwnable\\n/// @notice Contract that implements the same functionality as popular Ownable contract from openzeppelin library.\\n/// The only difference is that it adds a possibility to transfer ownership in two steps. Single step ownership\\n/// transfer is still supported.\\n/// @dev Two step ownership transfer is meant to be used by humans to avoid human error. Single step ownership\\n/// transfer is meant to be used by smart contracts to avoid over-complicated two step integartion. For that reason,\\n/// both ways are supported.\\n/// @custom:security-contact security@silo.finance\\nabstract contract TwoStepOwnable {\\n    /// @notice current owner\\n    address private _owner;\\n    /// @notice candidate to an owner\\n    address private _pendingOwner;\\n\\n    /// @notice Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\\n    /// @param previousOwner previous owner\\n    /// @param newOwner new owner\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    /// @notice Emitted when ownership transfer is proposed, aka pending owner is set\\n    /// @param previousOwner current owner\\n    /// @param newOwner new proposed/pending owner\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xab6fa28a2db4651ad9a1f1931ca396e4b8addb2e0eac424b04d2b5ad90441b54\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027b0380380620027b08339810160408190526200003491620001d6565b6200003f3362000054565b6200004d60008083620000a4565b5062000298565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600081815260026020818152604080842095881680855295825292839020865181559086015160018201558286015191810191909155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e085015160078201556101008501516008820155610120850151600990910155517ff254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df45890620001c9908590600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60405180910390a3505050565b60006101408284031215620001ea57600080fd5b620001f462000260565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b60405161014081016001600160401b03811182821017156200029257634e487b7160e01b600052604160045260246000fd5b60405290565b61250880620002a86000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806381b51e0c116100a2578063c42401f111610071578063c42401f114610244578063cbf75c9a14610253578063e076a5511461030c578063e30c39781461032b578063f2fde38b1461033c57600080fd5b806381b51e0c146101dc5780638da5cb5b146101ec578063b1e0176514610211578063bbdcbed61461022457600080fd5b80633a191482116100e95780633a1914821461017c5780636bcc8216146101aa578063715018a6146101b957806374a3e924146101c157806379ba5097146101d457600080fd5b806303dc12fc1461011b578063071962ff146101415780630d26ee9b146101545780633278c69414610167575b600080fd5b61012e61012936600461200a565b61034f565b6040519081526020015b60405180910390f35b61012e61014f366004611fce565b610456565b61012e610162366004612051565b61051f565b61017a610175366004611f2f565b6106c2565b005b61018f61018a366004612051565b610777565b60408051938452602084019290925290820152606001610138565b61012e670de0b6b3a764000081565b61017a610c01565b61017a6101cf366004611f7d565b610c46565b61017a610c9d565b61012e6804cf46d8192b672ecb81565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610138565b61012e61021f366004611fce565b610d33565b610237610232366004611f4a565b610dff565b604051610138919061213c565b60405160018152602001610138565b6102c2610261366004611f4a565b600260205281600052604060002060205280600052604060002060009150915050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015261012082015261014001610138565b61012e770de0b6b3a763ffff493b7bec438eaf141b844d2356e0000081565b6001546001600160a01b03166101f9565b61017a61034a366004611f2f565b6110f4565b604051631f0f875560e31b81526001600160a01b038316600482015260009033908290829063f87c3aa89060240160606040518083038186803b15801561039557600080fd5b505afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd919061208f565b90506104146103dc8387610dff565b6103ff6103fa670de0b6b3a76400008560000151866020015161119e565b6111d7565b836040015167ffffffffffffffff1687610777565b6001600160a01b0394851660009081526002602090815260408083209a9097168252989098529390962060098101939093556008909201949094559392505050565b604051631f0f875560e31b81526001600160a01b038381166004830152600091829186169063f87c3aa89060240160606040518083038186803b15801561049c57600080fd5b505afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d4919061208f565b90506105166104e38686610dff565b6105016103fa670de0b6b3a76400008560000151866020015161119e565b836040015167ffffffffffffffff168661051f565b95945050505050565b60008061052f6103fa858561248f565b9050600086602001518613156105bf57670de0b6b3a7640000808860200151886105599190612450565b848a60e0015161056991906123ac565b6101208b015161058190670de0b6b3a76400006121e5565b61058b91906121e5565b8a6080015161059a91906123ac565b6105a491906123ac565b6105ae9190612226565b6105b89190612226565b90506105fe565b6105fb6000670de0b6b3a76400008960400151896105dd9190612450565b8a60a001516105ec91906123ac565b6105f69190612226565b611245565b90505b6000670de0b6b3a7640000878960c0015161061991906123ac565b6106239190612226565b905060006106368961010001518361125b565b9050610688670de0b6b3a7640000858b600001518b6106559190612450565b8c6060015161066491906123ac565b61066e91906123ac565b6106789190612226565b61068290836121e5565b8361125b565b90506106a56106a061069a85846121e5565b8461125b565b61126a565b94506106b56301e1338086612431565b9998505050505050505050565b336106d56000546001600160a01b031690565b6001600160a01b0316146107045760405162461bcd60e51b81526004016106fb90612107565b60405180910390fd5b806001600160a01b03166107206000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000866101000151915086610120015190506000604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506107ef86866103fa919061248f565b81528751670de0b6b3a7640000906108079089612450565b896060015161081691906123ac565b6108209190612226565b60208083019190915288015187131561091457670de0b6b3a76400008089602001518961084d9190612450565b61085f85670de0b6b3a76400006121e5565b8b6080015161086e91906123ac565b61087891906123ac565b6108829190612226565b61088c9190612226565b60408201526020880151670de0b6b3a76400009081906108ac908a612450565b8a60e001518b608001516108c091906123ac565b6108ca91906123ac565b6108d49190612226565b6108de9190612226565b81602001516108ed91906121e5565b6060820152805160e089015161090391906123ac565b61090d90836121e5565b915061097a565b6109416000670de0b6b3a76400008a604001518a6109329190612450565b8b60a001516105ec91906123ac565b604082015260208101516060820152805160e08901516109779160009161096891906123ac565b6109729085612450565b61125b565b91505b670de0b6b3a7640000878960c0015161099391906123ac565b61099d9190612226565b60a082018190526109af90849061125b565b92508060400151836109c191906121e5565b6080820152805160608201516109d791906123ac565b81608001516109e691906121e5565b60c082015260a0810151608082015112801590610a0b57508060a001518160c0015112155b15610a4757805160c0820151608083015160029291610a29916121e5565b610a3391906123ac565b610a3d9190612226565b60e0820152610b51565b8060a001518160800151128015610a6557508060a001518160c00151125b15610a7b57805160a0820151610a3d91906123ac565b8060a00151816080015112158015610a9a57508060a001518160c00151125b15610af5576002816060015160028360a001518460800151610abc9190612450565b610ac6919061239d565b610ad09190612226565b610ada9190612226565b815160a0830151610aeb91906123ac565b610a3d9190612450565b6002816060015160028360a001518460c00151610b129190612450565b610b1c919061239d565b610b269190612226565b610b309190612226565b815160a0830151610b4191906123ac565b610b4b91906121e5565b60e08201525b6804cf46d8192b672ecb8160e0015112610b8557770de0b6b3a763ffff493b7bec438eaf141b844d2356e000009350610bcc565b670de0b6b3a7640000610b9b8260e001516112bc565b610ba59190612450565b6101208201819052600012610bbb576000610bc9565b610bc981610120015161126a565b93505b80516020820151610bf491610be0916123ac565b610bea90856121e5565b8260a0015161125b565b9250509450945094915050565b33610c146000546001600160a01b031690565b6001600160a01b031614610c3a5760405162461bcd60e51b81526004016106fb90612107565b610c446000611315565b565b33610c596000546001600160a01b031690565b6001600160a01b031614610c7f5760405162461bcd60e51b81526004016106fb90612107565b610c988383610c9336859003850185612034565b611365565b505050565b6001546001600160a01b03163314610d075760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b60648201526084016106fb565b610d21610d1c6001546001600160a01b031690565b611315565b600180546001600160a01b0319169055565b604051631f0f875560e31b81526001600160a01b038381166004830152600091829186169063f87c3aa89060240160606040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db1919061208f565b9050610df3610dc08686610dff565b610dde6103fa670de0b6b3a76400008560000151866020015161119e565b836040015167ffffffffffffffff1686610777565b50909695505050505050565b610e55604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0380841660009081526002602090815260408083209386168352929052205415610f1b57506001600160a01b0380831660009081526002602081815260408084209486168452938152918390208351610140810185528154815260018201549381019390935290810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009909101546101208201526110ee565b5060408051610140810182527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ad5481527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ae546020828101919091527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668af54828401527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b05460608301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b15460808301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b25460a08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b35460c08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b45460e08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b55461010083019081527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b65461012084019081526001600160a01b0387811660009081526002855286812091881680825282865296812060088101549094529590955293909152600901549091525b92915050565b336111076000546001600160a01b031690565b6001600160a01b03161461112d5760405162461bcd60e51b81526004016106fb90612107565b6001600160a01b0381166111925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fb565b61119b81611315565b50565b60008215806111ab575081155b156111b8575060006111d0565b826111c38584612431565b6111cd9190612254565b90505b9392505050565b60006001600160ff1b038211156112415760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016106fb565b5090565b600081831261125457816111d0565b5090919050565b600081831361125457816111d0565b6000808212156112415760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016106fb565b600068023f2fa8f6da5b9d31198212156112d857506000919050565b6804cf46d8192b672ecc82126112ed57600080fd5b6714057b7ef767814f82026111d0670de0b6b3a76400006706f05b59d3b2000083010561142a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600081815260026020818152604080842095881680855295825292839020865181559086015160018201558286015191810191909155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e085015160078201556101008501516008820155610120850151600990910155517ff254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df4589061141d90859061213c565b60405180910390a3505050565b60008082121561147e5768033dd1780914b971141982121561144e57506000919050565b61145a8260000361142a565b6ec097ce7bc90715b34b9f100000000081611477576114776124bc565b0592915050565b6806f05b59d3b2000000821261149357600080fd5b670de0b6b3a7640000608083901b046111d0816114b0565b919050565b6001607f1b818116156114d45770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6001607e1b8216156114f7577001306fe0a31b7152de8d5a46305c85eded0260801c5b6001607d1b82161561151a577001172b83c7d517adcdf7c8c50eb14a79200260801c5b6001607c1b82161561153d5770010b5586cf9890f6298b92b71842a983640260801c5b6001607b1b821615611560577001059b0d31585743ae7c548eb68ca417fe0260801c5b6001607a1b82161561158357700102c9a3e778060ee6f7caca4f7a29bde90260801c5b600160791b8216156115a65770010163da9fb33356d84a66ae336dcdfa400260801c5b600160781b8216156115c957700100b1afa5abcbed6129ab13ec11dc95440260801c5b600160771b8216156115ec5770010058c86da1c09ea1ff19d294cf2f679c0260801c5b600160761b82161561160f577001002c605e2e8cec506d21bfc89a23a0110260801c5b600160751b82161561163257700100162f3904051fa128bca9c55c31e5e00260801c5b600160741b821615611655577001000b175effdc76ba38e31671ca9397260260801c5b600160731b82161561167857700100058ba01fb9f96d6cacd4b180917c3e0260801c5b600160721b82161561169b5770010002c5cc37da9491d0985c348c68e7b40260801c5b600160711b8216156116be577001000162e525ee054754457d59952920270260801c5b600160701b8216156116e15770010000b17255775c040618bf4a4ade83fd0260801c5b6001606f1b821615611704577001000058b91b5bc9ae2eed81e9b7d4cfac0260801c5b6001606e1b82161561172757700100002c5c89d5ec6ca4d7c8acc017b7ca0260801c5b6001606d1b82161561174a5770010000162e43f4f831060e02d839a9d16d0260801c5b6001606c1b82161561176d57700100000b1721bcfc99d9f890ea069117630260801c5b6001606b1b8216156117905770010000058b90cf1e6d97f9ca14dbcc16290260801c5b6001606a1b8216156117b3577001000002c5c863b73f016468f6bac5ca2c0260801c5b600160691b8216156117d657700100000162e430e5a18f6119e3c02282a60260801c5b600160681b8216156117f9577001000000b1721835514b86e6d96efd1bff0260801c5b600160671b82161561181c57700100000058b90c0b48c6be5df846c5b2f00260801c5b600160661b82161561183f5770010000002c5c8601cc6b9e94213c72737b0260801c5b600160651b821615611862577001000000162e42fff037df38aa2b219f070260801c5b600160641b8216156118855770010000000b17217fba9c739aa5819f44fa0260801c5b600160631b8216156118a8577001000000058b90bfcdee5acd3c1cedc8240260801c5b600160621b8216156118cb57700100000002c5c85fe31f35a6a30da1be510260801c5b600160611b8216156118ee5770010000000162e42ff0999ce3541b9fffd00260801c5b600160601b82161561191157700100000000b17217f80f4ef5aadda455540260801c5b6001605f1b8216156119345770010000000058b90bfbf8479bd5a81b51ae0260801c5b6001605e1b821615611957577001000000002c5c85fdf84bd62ae30a74cd0260801c5b6001605d1b82161561197a57700100000000162e42fefb2fed257559bdaa0260801c5b6001605c1b82161561199d577001000000000b17217f7d5a7716bba4a9af0260801c5b6001605b1b8216156119c057700100000000058b90bfbe9ddbac5e109ccf0260801c5b6001605a1b8216156119e35770010000000002c5c85fdf4b15de6f17eb0e0260801c5b600160591b821615611a06577001000000000162e42fefa494f1478fde050260801c5b600160581b821615611a295770010000000000b17217f7d20cf927c8e94d0260801c5b600160571b821615611a4c577001000000000058b90bfbe8f71cb4e4b33e0260801c5b600160561b821615611a6f57700100000000002c5c85fdf477b662b269460260801c5b600160551b821615611a925770010000000000162e42fefa3ae53369388d0260801c5b600160541b821615611ab557700100000000000b17217f7d1d351a389d410260801c5b600160531b821615611ad85770010000000000058b90bfbe8e8b2d3d4edf0260801c5b600160521b821615611afb577001000000000002c5c85fdf4741bea6e77f0260801c5b600160511b821615611b1e57700100000000000162e42fefa39fe95583c30260801c5b600160501b821615611b41577001000000000000b17217f7d1cfb72b45e30260801c5b6980000000000000000000821615611b6a57700100000000000058b90bfbe8e7cc35c3f20260801c5b6940000000000000000000821615611b935770010000000000002c5c85fdf473e242ea390260801c5b6920000000000000000000821615611bbc577001000000000000162e42fefa39f02b772c0260801c5b6910000000000000000000821615611be55770010000000000000b17217f7d1cf7d83c1a0260801c5b6908000000000000000000821615611c0e577001000000000000058b90bfbe8e7bdcbe2e0260801c5b6904000000000000000000821615611c3757700100000000000002c5c85fdf473dea871f0260801c5b6902000000000000000000821615611c605770010000000000000162e42fefa39ef44d920260801c5b6901000000000000000000821615611c8957700100000000000000b17217f7d1cf79e9490260801c5b68800000000000000000821615611cb15770010000000000000058b90bfbe8e7bce5450260801c5b68400000000000000000821615611cd9577001000000000000002c5c85fdf473de6eca0260801c5b68200000000000000000821615611d0157700100000000000000162e42fefa39ef366f0260801c5b68100000000000000000821615611d29577001000000000000000b17217f7d1cf79afa0260801c5b68080000000000000000821615611d5157700100000000000000058b90bfbe8e7bcd6e0260801c5b68040000000000000000821615611d795770010000000000000002c5c85fdf473de6b30260801c5b68020000000000000000821615611da1577001000000000000000162e42fefa39ef3590260801c5b68010000000000000000821615611dc95770010000000000000000b17217f7d1cf79ac0260801c5b6001608083901c011b6110ee81670de0b6b3a7640000600160801b600080806000198587098587029250828110838203039150508060001415611e1e5760008411611e1357600080fd5b5082900490506111d0565b808411611e2a57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b03811681146114ab57600080fd5b60006101408284031215611ebd57600080fd5b611ec56121ad565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b600060208284031215611f4157600080fd5b6111d082611e93565b60008060408385031215611f5d57600080fd5b611f6683611e93565b9150611f7460208401611e93565b90509250929050565b6000806000838503610180811215611f9457600080fd5b611f9d85611e93565b9350611fab60208601611e93565b9250610140603f1982011215611fc057600080fd5b506040840190509250925092565b600080600060608486031215611fe357600080fd5b611fec84611e93565b9250611ffa60208501611e93565b9150604084013590509250925092565b6000806040838503121561201d57600080fd5b61202683611e93565b946020939093013593505050565b6000610140828403121561204757600080fd5b6111d08383611eaa565b6000806000806101a0858703121561206857600080fd5b6120728686611eaa565b966101408601359650610160860135956101800135945092505050565b6000606082840312156120a157600080fd5b6040516060810167ffffffffffffffff82821081831117156120d357634e487b7160e01b600052604160045260246000fd5b8160405284518352602085015160208401526040850151915080821682146120fa57600080fd5b5060408201529392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b604051610140810167ffffffffffffffff811182821017156121df57634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b0384900385131615612207576122076124a6565b600160ff1b8390038412811615612220576122206124a6565b50500190565b600082612235576122356124bc565b600160ff1b82146000198414161561224f5761224f6124a6565b500590565b600082612263576122636124bc565b500490565b80825b600180861161227a57506122ad565b6001600160ff1b03829004821115612294576122946124a6565b808616156122a157918102915b9490941c93800261226b565b935093915050565b60008280156122cb57600181146122d5576122de565b60019150506110ee565b829150506110ee565b50816122ec575060006110ee565b506001600082138082146123055780156123245761233e565b6001600160ff1b0383900483111561231f5761231f6124a6565b61233e565b6001600160ff1b0383900583121561233e5761233e6124a6565b508083161561234a5750805b61235a8360011c83840283612268565b600082136001600160ff1b0382900483111615612379576123796124a6565b60008212600160ff1b82900583121615612395576123956124a6565b029392505050565b60006111d060ff8416836122b5565b60006001600160ff1b03818413828413808216868404861116156123d2576123d26124a6565b600160ff1b60008712828116878305891216156123f1576123f16124a6565b6000871292508782058712848416161561240d5761240d6124a6565b87850587128184161615612423576124236124a6565b505050929093029392505050565b600081600019048311821515161561244b5761244b6124a6565b500290565b60008083128015600160ff1b85018412161561246e5761246e6124a6565b6001600160ff1b0384018313811615612489576124896124a6565b50500390565b6000828210156124a1576124a16124a6565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220fb8d6823d1a9e8e51140b60817c45b69cbbd07510b71e523882eedb10acc865864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806381b51e0c116100a2578063c42401f111610071578063c42401f114610244578063cbf75c9a14610253578063e076a5511461030c578063e30c39781461032b578063f2fde38b1461033c57600080fd5b806381b51e0c146101dc5780638da5cb5b146101ec578063b1e0176514610211578063bbdcbed61461022457600080fd5b80633a191482116100e95780633a1914821461017c5780636bcc8216146101aa578063715018a6146101b957806374a3e924146101c157806379ba5097146101d457600080fd5b806303dc12fc1461011b578063071962ff146101415780630d26ee9b146101545780633278c69414610167575b600080fd5b61012e61012936600461200a565b61034f565b6040519081526020015b60405180910390f35b61012e61014f366004611fce565b610456565b61012e610162366004612051565b61051f565b61017a610175366004611f2f565b6106c2565b005b61018f61018a366004612051565b610777565b60408051938452602084019290925290820152606001610138565b61012e670de0b6b3a764000081565b61017a610c01565b61017a6101cf366004611f7d565b610c46565b61017a610c9d565b61012e6804cf46d8192b672ecb81565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610138565b61012e61021f366004611fce565b610d33565b610237610232366004611f4a565b610dff565b604051610138919061213c565b60405160018152602001610138565b6102c2610261366004611f4a565b600260205281600052604060002060205280600052604060002060009150915050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015261012082015261014001610138565b61012e770de0b6b3a763ffff493b7bec438eaf141b844d2356e0000081565b6001546001600160a01b03166101f9565b61017a61034a366004611f2f565b6110f4565b604051631f0f875560e31b81526001600160a01b038316600482015260009033908290829063f87c3aa89060240160606040518083038186803b15801561039557600080fd5b505afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd919061208f565b90506104146103dc8387610dff565b6103ff6103fa670de0b6b3a76400008560000151866020015161119e565b6111d7565b836040015167ffffffffffffffff1687610777565b6001600160a01b0394851660009081526002602090815260408083209a9097168252989098529390962060098101939093556008909201949094559392505050565b604051631f0f875560e31b81526001600160a01b038381166004830152600091829186169063f87c3aa89060240160606040518083038186803b15801561049c57600080fd5b505afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d4919061208f565b90506105166104e38686610dff565b6105016103fa670de0b6b3a76400008560000151866020015161119e565b836040015167ffffffffffffffff168661051f565b95945050505050565b60008061052f6103fa858561248f565b9050600086602001518613156105bf57670de0b6b3a7640000808860200151886105599190612450565b848a60e0015161056991906123ac565b6101208b015161058190670de0b6b3a76400006121e5565b61058b91906121e5565b8a6080015161059a91906123ac565b6105a491906123ac565b6105ae9190612226565b6105b89190612226565b90506105fe565b6105fb6000670de0b6b3a76400008960400151896105dd9190612450565b8a60a001516105ec91906123ac565b6105f69190612226565b611245565b90505b6000670de0b6b3a7640000878960c0015161061991906123ac565b6106239190612226565b905060006106368961010001518361125b565b9050610688670de0b6b3a7640000858b600001518b6106559190612450565b8c6060015161066491906123ac565b61066e91906123ac565b6106789190612226565b61068290836121e5565b8361125b565b90506106a56106a061069a85846121e5565b8461125b565b61126a565b94506106b56301e1338086612431565b9998505050505050505050565b336106d56000546001600160a01b031690565b6001600160a01b0316146107045760405162461bcd60e51b81526004016106fb90612107565b60405180910390fd5b806001600160a01b03166107206000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000866101000151915086610120015190506000604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506107ef86866103fa919061248f565b81528751670de0b6b3a7640000906108079089612450565b896060015161081691906123ac565b6108209190612226565b60208083019190915288015187131561091457670de0b6b3a76400008089602001518961084d9190612450565b61085f85670de0b6b3a76400006121e5565b8b6080015161086e91906123ac565b61087891906123ac565b6108829190612226565b61088c9190612226565b60408201526020880151670de0b6b3a76400009081906108ac908a612450565b8a60e001518b608001516108c091906123ac565b6108ca91906123ac565b6108d49190612226565b6108de9190612226565b81602001516108ed91906121e5565b6060820152805160e089015161090391906123ac565b61090d90836121e5565b915061097a565b6109416000670de0b6b3a76400008a604001518a6109329190612450565b8b60a001516105ec91906123ac565b604082015260208101516060820152805160e08901516109779160009161096891906123ac565b6109729085612450565b61125b565b91505b670de0b6b3a7640000878960c0015161099391906123ac565b61099d9190612226565b60a082018190526109af90849061125b565b92508060400151836109c191906121e5565b6080820152805160608201516109d791906123ac565b81608001516109e691906121e5565b60c082015260a0810151608082015112801590610a0b57508060a001518160c0015112155b15610a4757805160c0820151608083015160029291610a29916121e5565b610a3391906123ac565b610a3d9190612226565b60e0820152610b51565b8060a001518160800151128015610a6557508060a001518160c00151125b15610a7b57805160a0820151610a3d91906123ac565b8060a00151816080015112158015610a9a57508060a001518160c00151125b15610af5576002816060015160028360a001518460800151610abc9190612450565b610ac6919061239d565b610ad09190612226565b610ada9190612226565b815160a0830151610aeb91906123ac565b610a3d9190612450565b6002816060015160028360a001518460c00151610b129190612450565b610b1c919061239d565b610b269190612226565b610b309190612226565b815160a0830151610b4191906123ac565b610b4b91906121e5565b60e08201525b6804cf46d8192b672ecb8160e0015112610b8557770de0b6b3a763ffff493b7bec438eaf141b844d2356e000009350610bcc565b670de0b6b3a7640000610b9b8260e001516112bc565b610ba59190612450565b6101208201819052600012610bbb576000610bc9565b610bc981610120015161126a565b93505b80516020820151610bf491610be0916123ac565b610bea90856121e5565b8260a0015161125b565b9250509450945094915050565b33610c146000546001600160a01b031690565b6001600160a01b031614610c3a5760405162461bcd60e51b81526004016106fb90612107565b610c446000611315565b565b33610c596000546001600160a01b031690565b6001600160a01b031614610c7f5760405162461bcd60e51b81526004016106fb90612107565b610c988383610c9336859003850185612034565b611365565b505050565b6001546001600160a01b03163314610d075760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b60648201526084016106fb565b610d21610d1c6001546001600160a01b031690565b611315565b600180546001600160a01b0319169055565b604051631f0f875560e31b81526001600160a01b038381166004830152600091829186169063f87c3aa89060240160606040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db1919061208f565b9050610df3610dc08686610dff565b610dde6103fa670de0b6b3a76400008560000151866020015161119e565b836040015167ffffffffffffffff1686610777565b50909695505050505050565b610e55604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0380841660009081526002602090815260408083209386168352929052205415610f1b57506001600160a01b0380831660009081526002602081815260408084209486168452938152918390208351610140810185528154815260018201549381019390935290810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009909101546101208201526110ee565b5060408051610140810182527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ad5481527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ae546020828101919091527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668af54828401527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b05460608301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b15460808301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b25460a08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b35460c08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b45460e08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b55461010083019081527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b65461012084019081526001600160a01b0387811660009081526002855286812091881680825282865296812060088101549094529590955293909152600901549091525b92915050565b336111076000546001600160a01b031690565b6001600160a01b03161461112d5760405162461bcd60e51b81526004016106fb90612107565b6001600160a01b0381166111925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fb565b61119b81611315565b50565b60008215806111ab575081155b156111b8575060006111d0565b826111c38584612431565b6111cd9190612254565b90505b9392505050565b60006001600160ff1b038211156112415760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016106fb565b5090565b600081831261125457816111d0565b5090919050565b600081831361125457816111d0565b6000808212156112415760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016106fb565b600068023f2fa8f6da5b9d31198212156112d857506000919050565b6804cf46d8192b672ecc82126112ed57600080fd5b6714057b7ef767814f82026111d0670de0b6b3a76400006706f05b59d3b2000083010561142a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600081815260026020818152604080842095881680855295825292839020865181559086015160018201558286015191810191909155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e085015160078201556101008501516008820155610120850151600990910155517ff254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df4589061141d90859061213c565b60405180910390a3505050565b60008082121561147e5768033dd1780914b971141982121561144e57506000919050565b61145a8260000361142a565b6ec097ce7bc90715b34b9f100000000081611477576114776124bc565b0592915050565b6806f05b59d3b2000000821261149357600080fd5b670de0b6b3a7640000608083901b046111d0816114b0565b919050565b6001607f1b818116156114d45770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6001607e1b8216156114f7577001306fe0a31b7152de8d5a46305c85eded0260801c5b6001607d1b82161561151a577001172b83c7d517adcdf7c8c50eb14a79200260801c5b6001607c1b82161561153d5770010b5586cf9890f6298b92b71842a983640260801c5b6001607b1b821615611560577001059b0d31585743ae7c548eb68ca417fe0260801c5b6001607a1b82161561158357700102c9a3e778060ee6f7caca4f7a29bde90260801c5b600160791b8216156115a65770010163da9fb33356d84a66ae336dcdfa400260801c5b600160781b8216156115c957700100b1afa5abcbed6129ab13ec11dc95440260801c5b600160771b8216156115ec5770010058c86da1c09ea1ff19d294cf2f679c0260801c5b600160761b82161561160f577001002c605e2e8cec506d21bfc89a23a0110260801c5b600160751b82161561163257700100162f3904051fa128bca9c55c31e5e00260801c5b600160741b821615611655577001000b175effdc76ba38e31671ca9397260260801c5b600160731b82161561167857700100058ba01fb9f96d6cacd4b180917c3e0260801c5b600160721b82161561169b5770010002c5cc37da9491d0985c348c68e7b40260801c5b600160711b8216156116be577001000162e525ee054754457d59952920270260801c5b600160701b8216156116e15770010000b17255775c040618bf4a4ade83fd0260801c5b6001606f1b821615611704577001000058b91b5bc9ae2eed81e9b7d4cfac0260801c5b6001606e1b82161561172757700100002c5c89d5ec6ca4d7c8acc017b7ca0260801c5b6001606d1b82161561174a5770010000162e43f4f831060e02d839a9d16d0260801c5b6001606c1b82161561176d57700100000b1721bcfc99d9f890ea069117630260801c5b6001606b1b8216156117905770010000058b90cf1e6d97f9ca14dbcc16290260801c5b6001606a1b8216156117b3577001000002c5c863b73f016468f6bac5ca2c0260801c5b600160691b8216156117d657700100000162e430e5a18f6119e3c02282a60260801c5b600160681b8216156117f9577001000000b1721835514b86e6d96efd1bff0260801c5b600160671b82161561181c57700100000058b90c0b48c6be5df846c5b2f00260801c5b600160661b82161561183f5770010000002c5c8601cc6b9e94213c72737b0260801c5b600160651b821615611862577001000000162e42fff037df38aa2b219f070260801c5b600160641b8216156118855770010000000b17217fba9c739aa5819f44fa0260801c5b600160631b8216156118a8577001000000058b90bfcdee5acd3c1cedc8240260801c5b600160621b8216156118cb57700100000002c5c85fe31f35a6a30da1be510260801c5b600160611b8216156118ee5770010000000162e42ff0999ce3541b9fffd00260801c5b600160601b82161561191157700100000000b17217f80f4ef5aadda455540260801c5b6001605f1b8216156119345770010000000058b90bfbf8479bd5a81b51ae0260801c5b6001605e1b821615611957577001000000002c5c85fdf84bd62ae30a74cd0260801c5b6001605d1b82161561197a57700100000000162e42fefb2fed257559bdaa0260801c5b6001605c1b82161561199d577001000000000b17217f7d5a7716bba4a9af0260801c5b6001605b1b8216156119c057700100000000058b90bfbe9ddbac5e109ccf0260801c5b6001605a1b8216156119e35770010000000002c5c85fdf4b15de6f17eb0e0260801c5b600160591b821615611a06577001000000000162e42fefa494f1478fde050260801c5b600160581b821615611a295770010000000000b17217f7d20cf927c8e94d0260801c5b600160571b821615611a4c577001000000000058b90bfbe8f71cb4e4b33e0260801c5b600160561b821615611a6f57700100000000002c5c85fdf477b662b269460260801c5b600160551b821615611a925770010000000000162e42fefa3ae53369388d0260801c5b600160541b821615611ab557700100000000000b17217f7d1d351a389d410260801c5b600160531b821615611ad85770010000000000058b90bfbe8e8b2d3d4edf0260801c5b600160521b821615611afb577001000000000002c5c85fdf4741bea6e77f0260801c5b600160511b821615611b1e57700100000000000162e42fefa39fe95583c30260801c5b600160501b821615611b41577001000000000000b17217f7d1cfb72b45e30260801c5b6980000000000000000000821615611b6a57700100000000000058b90bfbe8e7cc35c3f20260801c5b6940000000000000000000821615611b935770010000000000002c5c85fdf473e242ea390260801c5b6920000000000000000000821615611bbc577001000000000000162e42fefa39f02b772c0260801c5b6910000000000000000000821615611be55770010000000000000b17217f7d1cf7d83c1a0260801c5b6908000000000000000000821615611c0e577001000000000000058b90bfbe8e7bdcbe2e0260801c5b6904000000000000000000821615611c3757700100000000000002c5c85fdf473dea871f0260801c5b6902000000000000000000821615611c605770010000000000000162e42fefa39ef44d920260801c5b6901000000000000000000821615611c8957700100000000000000b17217f7d1cf79e9490260801c5b68800000000000000000821615611cb15770010000000000000058b90bfbe8e7bce5450260801c5b68400000000000000000821615611cd9577001000000000000002c5c85fdf473de6eca0260801c5b68200000000000000000821615611d0157700100000000000000162e42fefa39ef366f0260801c5b68100000000000000000821615611d29577001000000000000000b17217f7d1cf79afa0260801c5b68080000000000000000821615611d5157700100000000000000058b90bfbe8e7bcd6e0260801c5b68040000000000000000821615611d795770010000000000000002c5c85fdf473de6b30260801c5b68020000000000000000821615611da1577001000000000000000162e42fefa39ef3590260801c5b68010000000000000000821615611dc95770010000000000000000b17217f7d1cf79ac0260801c5b6001608083901c011b6110ee81670de0b6b3a7640000600160801b600080806000198587098587029250828110838203039150508060001415611e1e5760008411611e1357600080fd5b5082900490506111d0565b808411611e2a57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b03811681146114ab57600080fd5b60006101408284031215611ebd57600080fd5b611ec56121ad565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b600060208284031215611f4157600080fd5b6111d082611e93565b60008060408385031215611f5d57600080fd5b611f6683611e93565b9150611f7460208401611e93565b90509250929050565b6000806000838503610180811215611f9457600080fd5b611f9d85611e93565b9350611fab60208601611e93565b9250610140603f1982011215611fc057600080fd5b506040840190509250925092565b600080600060608486031215611fe357600080fd5b611fec84611e93565b9250611ffa60208501611e93565b9150604084013590509250925092565b6000806040838503121561201d57600080fd5b61202683611e93565b946020939093013593505050565b6000610140828403121561204757600080fd5b6111d08383611eaa565b6000806000806101a0858703121561206857600080fd5b6120728686611eaa565b966101408601359650610160860135956101800135945092505050565b6000606082840312156120a157600080fd5b6040516060810167ffffffffffffffff82821081831117156120d357634e487b7160e01b600052604160045260246000fd5b8160405284518352602085015160208401526040850151915080821682146120fa57600080fd5b5060408201529392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b604051610140810167ffffffffffffffff811182821017156121df57634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b0384900385131615612207576122076124a6565b600160ff1b8390038412811615612220576122206124a6565b50500190565b600082612235576122356124bc565b600160ff1b82146000198414161561224f5761224f6124a6565b500590565b600082612263576122636124bc565b500490565b80825b600180861161227a57506122ad565b6001600160ff1b03829004821115612294576122946124a6565b808616156122a157918102915b9490941c93800261226b565b935093915050565b60008280156122cb57600181146122d5576122de565b60019150506110ee565b829150506110ee565b50816122ec575060006110ee565b506001600082138082146123055780156123245761233e565b6001600160ff1b0383900483111561231f5761231f6124a6565b61233e565b6001600160ff1b0383900583121561233e5761233e6124a6565b508083161561234a5750805b61235a8360011c83840283612268565b600082136001600160ff1b0382900483111615612379576123796124a6565b60008212600160ff1b82900583121615612395576123956124a6565b029392505050565b60006111d060ff8416836122b5565b60006001600160ff1b03818413828413808216868404861116156123d2576123d26124a6565b600160ff1b60008712828116878305891216156123f1576123f16124a6565b6000871292508782058712848416161561240d5761240d6124a6565b87850587128184161615612423576124236124a6565b505050929093029392505050565b600081600019048311821515161561244b5761244b6124a6565b500290565b60008083128015600160ff1b85018412161561246e5761246e6124a6565b6001600160ff1b0384018313811615612489576124896124a6565b50500390565b6000828210156124a1576124a16124a6565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220fb8d6823d1a9e8e51140b60817c45b69cbbd07510b71e523882eedb10acc865864736f6c63430008070033",
  "libraries": {
    "PRBMathSD59x18": "0xc69e94Eca880e3A8fC173A12037b7ef461A1102A"
  },
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "details": "Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment for seamless service. Please refer to separte litepaper about model for design details.",
    "events": {
      "ConfigUpdate(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "params": {
          "asset": "asset address for which config should be set",
          "config": "config sturct for asset in Silo",
          "silo": "Silo address for which config should be set"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "calculateCompoundInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)": {
        "details": "pure function that calculates interest rate based on raw input data",
        "params": {
          "_blockTimestamp": "current block timestamp",
          "_c": "configuration object, InterestRateModel.Config",
          "_interestRateTimestamp": "timestamp of last interest rate update",
          "_u": "asset untilization"
        },
        "returns": {
          "Tcrit": "time during which the utilization exceeds the critical value",
          "rcomp": "compounded interest rate from last update until now",
          "ri": "current integral part of the rate"
        }
      },
      "calculateCurrentInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)": {
        "details": "pure function that calculates current annual interest rate",
        "params": {
          "_blockTimestamp": "current block timestamp",
          "_c": "configuration object, InterestRateModel.Config",
          "_interestRateTimestamp": "timestamp of last interest rate update",
          "_u": "asset untilization"
        },
        "returns": {
          "rcur": "current annual interest rate"
        }
      },
      "getCompoundInterestRate(address,address,uint256)": {
        "details": "get compound interest rate",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp",
          "_silo": "address of Silo"
        },
        "returns": {
          "rcomp": "compounded interest rate from last update until now"
        }
      },
      "getCompoundInterestRateAndUpdate(address,uint256)": {
        "details": "get compound interest rate and update model storage",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp"
        },
        "returns": {
          "rcomp": "compounded interest rate from last update until now"
        }
      },
      "getConfig(address,address)": {
        "details": "Get config for giver asset in a Silo. If dedicated config is not set, default one will be returned.",
        "params": {
          "_asset": "asset address for which config should be set",
          "_silo": "Silo address for which config should be set"
        },
        "returns": {
          "_0": "Config sturct for asset in Silo"
        }
      },
      "getCurrentInterestRate(address,address,uint256)": {
        "details": "get current annual interest rate",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp",
          "_silo": "address of Silo"
        },
        "returns": {
          "rcur": "current annual interest rate"
        }
      },
      "interestRateModelPing()": {
        "details": "just a helper method to see if address is a InterestRateModel",
        "returns": {
          "_0": "always true"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setConfig(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "details": "Set dedicated config for giver asset in a Silo. Config is per asset per Silo so different assets in different Silo can have different configs.",
        "params": {
          "_asset": "asset address for which config should be set",
          "_silo": "Silo address for which config should be set"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "DP": {
        "details": "DP is 18 decimal points used for integer calculations"
      },
      "RCOMP_MAX": {
        "details": "maximum value of compound interest the model will return"
      },
      "X_MAX": {
        "details": "maximum value of X for which, RCOMP_MAX should be returned"
      }
    },
    "title": "InterestRateModel",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ConfigUpdate(address,address,(int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "notice": "Emitted on config change"
      },
      "OwnershipPending(address,address)": {
        "notice": "Emitted when ownership transfer is proposed, aka pending owner is set"
      },
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`"
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "Dynamic interest rate model implementation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22162,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22165,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10415,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "config",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Config)16129_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Config)16129_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IInterestRateModel.Config))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Config)16129_storage)"
      },
      "t_mapping(t_address,t_struct(Config)16129_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInterestRateModel.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)16129_storage"
      },
      "t_struct(Config)16129_storage": {
        "encoding": "inplace",
        "label": "struct IInterestRateModel.Config",
        "members": [
          {
            "astId": 16110,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "uopt",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 16112,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ucrit",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 16114,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ulow",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 16116,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ki",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 16118,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "kcrit",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 16120,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "klow",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 16122,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "klin",
            "offset": 0,
            "slot": "6",
            "type": "t_int256"
          },
          {
            "astId": 16124,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "beta",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 16126,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ri",
            "offset": 0,
            "slot": "8",
            "type": "t_int256"
          },
          {
            "astId": 16128,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "Tcrit",
            "offset": 0,
            "slot": "9",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "320"
      }
    }
  }
}